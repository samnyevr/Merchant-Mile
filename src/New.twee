:: StoryTitle
ALPHA.v2.8.6


:: StoryData
{
  "ifid": "a4616cc7-9c51-4f5e-83ab-35fd582ad1fb",
  "format": "SugarCube",
  "format-version": "2.37.3",
  "start": "Opener",
  "tag-colors": {
    "Outside": "green",
    "Indoor": "orange",
    "Special": "purple",
    "DO-NOT-TOUCH-BELOW": "red"
  },
  "zoom": 0.6
}


:: Apple Picking {"position":"3575,1250","size":"100,100"}
You enthusastically take part in the harvest, hauling in the wheat from the fields.

<<link [[Back to the Farm|Farm]]>><<sequenceadvance "$season">><</link>>


:: Assignation {"position":"3700,1375","size":"100,100"}
There's work to be done, but you slip away. Rowan left a note tucked under your pillow on the last saint's day — "Meet me by the lychgate when our fathers are busy."

Stolen kisses, sweet promises, a brief caress under the drooping lychgate roof ... it's all you have time for before you are discovered and all hell breaks loose.

Afterwards, chastened and punished, you are allowed to return to farm duties, but you are constantly watched, this won't happen again.

<<link [[Back to the Farm|Farm]]>><<sequenceadvance "$season">><</link>>


:: Bandit Dock [Outside] {"position":"1700,1300","size":"100,100"}
A poorly maintained dock lies before you, at this time no boat to unload is present, nor any bandits...

<b><i>Back to..</i></b>
- [[Bandits]]


:: Bandits [Outside] {"position":"1700,1150","size":"100,100"}
<b><i>Where to?</i></b>
- [[SouthGate]]
- [[Bandit Dock]]


:: Barracks [Indoor] {"position":"1550,1100","size":"100,100"}
Musty interior tells you how likely anyone bathes between posts.

<b><i>Where to?</i></b>
- [[SouthGate]]
- [[Bandits]]


:: Bazaar [Indoor] {"position":"1200,500","size":"100,200"}
<html><img src="https://inklings.live/Twines/icons/abstract-062.svg" alt="<<_item1.name>> icon" style="width: 50px; height: 50px; margin-bottom: 10px;" /><big><b>Crowl</big></b></html>
<b><u><<=passage()>></u></b>
<b><i>Where to?</i></b>
- [[Square]] 
- [[Southern Pass|T2]] 
- [[Witches]]


:: BazaarShop {"position":"3625,1825","size":"100,100"}
<html><img src="https://inklings.live/Twines/icons/abstract-062.svg" alt="<<_item1.name>> icon" style="width: 50px; height: 50px; margin-bottom: 10px;" /><big><b>Crowl</big></b></html>
<!-- Setting up feedback area for purchase confirmation -->
<div id="feedback" style="width: 100%; margin-bottom: 15px; color: green;"></div>

<!-- Display focus-based purchase counter -->
<<set $maxPurchases to Math.floor($focus / 20)>> <!-- Set max purchases based on focus (e.g., 1 purchase per 20 focus) -->
<<set $purchasesLeft to $maxPurchases>>
<div>Purchases available: <span id="purchase-counter"><<=$purchasesLeft>></span></div>
<div><em>"I can tell you’re feeling a bit weary," says the shopkeeper, glancing at your posture.</em></div>

<!-- Display item pool with manual purchase links -->
<div style="display: grid; grid-template-columns: repeat(3, 1fr); gap: 20px;">

    <!-- Item 1 -->
    <<set _item1 to $displayItems[0]>>
    <div>
        <html><img src="<<print _item1.icon>>" alt="<<_item1.name>> icon" style="width: 50px; height: 50px; margin-bottom: 10px;" /></html>
        <strong><<=_item1.name>></strong> - Price: <<=_item1.value>> funds<br>
        <<link "Buy <<=_item1.name>>">>
            <<if $funds >= _item1.value and _item1.quantity > 0 and $purchasesLeft > 0>>
                <<set $funds -= _item1.value>>
                <<set $mgcoffer += Math.floor(_item1.value / 5)>>
                <<pickup $player _item1.name 1>>
                <<set _item1.quantity -= 1>>
                <<set $purchasesLeft -= 1>>

                <!-- Update quantity and purchase counter -->
                <<replace "#feedback">>You purchased <<=_item1.name>>! Funds left: <<=$funds>><</replace>>
                <<replace "#purchase-counter">><<=$purchasesLeft>><</replace>>

                <!-- Sidebar Update for Funds -->
                <<run UI.update()>>

                <!-- Notify when out of purchases -->
                <<if $purchasesLeft === 0>>
                    <<replace "#feedback">>"You seem to be out of energy to make more purchases," the shopkeeper observes.<</replace>>
                <</if>>

            <<elseif $purchasesLeft <= 0>>
                <<replace "#feedback">>"It looks like you’re too tired to continue shopping," the shopkeeper remarks.<</replace>>
            <<elseif $funds < _item1.value>>
                <<replace "#feedback">>Not enough funds to buy <<=_item1.name>><</replace>>
            <</if>>
        <</link>>
    </div>

    <!-- Repeat this block for each item (2-6) -->

</div>

<<set $shopVisitCount to $shopVisitCount + 1>>
<<if $shopVisitCount >= 12>>
    <<set $shopVisitCount to 0>>
    <<set $displayItems to $bazaarItems.slice().sort(() => Math.random() - 0.5).slice(0, 6)>>
<</if>>

[[ShopRnd2]]




[[ShopRnd1]]


:: BlackoutPassage {"position":"1100,200","size":"100,100"}
\:: BlackoutPassage
You feel the world spinning... and then everything goes black.

<<set $focus to 50>>  <!-- Restore focus -->
<<set $blackoutTriggered to false>>  <!-- Reset blackout trigger -->
<<set $depletionActive to true>>  <!-- Reactivate depletion -->
<<set _percentageLoss = 0.1 + ($prestige * 0.05)>>  <!-- Base 10% + 5% per prestige level -->
<<set _fundsLoss = Math.floor($funds * _percentageLoss)>>  <!-- Calculate loss -->
<<set $funds -= _fundsLoss>>  <!-- Subtract the loss -->

<<if $funds < 0>> 
    <<set $funds = 0>>  <!-- Ensure funds do not go below 0 -->
<</if>>

You lost <<print _fundsLoss>> coins during the blackout.


When you awaken, a few coins seem to be missing, but you're not quite sure what happened...

[[North Gate]] 
[[Continue|View Cart]]


:: CBridgeA [Outside] {"position":"975,575","size":"100,100"}
<html><img src="https://inklings.live/Twines/icons/abstract-062.svg" alt="<<_item1.name>> icon" style="width: 50px; height: 50px; margin-bottom: 10px;" /><big><b>Crowl</big></b></html>
<b><u><<=passage()>></u></b>
<b><i>Where to?</i></b>
- [[North Path|T1]] 
- [[Witches]] 
- [[MayorOffice]]
<sub><u>Toward Moon Docks</u></sub>
- [[Moonligh Path|T4]]


:: CReg {"position":"700,725","size":"100,100"}
- <<link "Main Hall">>
    <<goto "MayorOffice">>
<</link>>


:: CStorage {"position":"700,825","size":"100,100"}
- <<link "Main Hall">>
    <<goto "MayorOffice">>
<</link>>


:: Caretakers {"position":"2400,625","size":"100,100"}
<b><i>Do you..</i></b>
- [[Back to Barn.|CityFarm]]
- [[Look around East.|Wheatfield]]
- [[Look around north.|Stalls]]

<sub><u>Back to Crowl</u></sub>
- [[Slums]] 
- [[Lower Slums]]


:: CityFarm [Outside] {"position":"2400,400","size":"200,200"}
A massive farm sprawls the area from where you stand. Up ahead a handful of land caretakers seem to be in a meeting...

<b><i>Do you..</i></b>
- [[Inquire the huddle.|Caretakers]]
- [[Look around north.|Stalls]]
- [[Look around East.|Wheatfield]]

<sub><u>Back to Crowl</u></sub>
- [[Slums]] 
- [[Lower Slums]]


:: Crafting {"position":"2625,800","size":"100,100"}
<html><img src="https://inklings.live/Twines/icons/house.svg" alt="<<_item1.name>> icon" style="width: 50px; height: 50px; margin-bottom: 10px;" /><img src="https://inklings.live/Twines/icons/toolbox.svg" alt="<<_item1.name>> icon" style="width: 50px; height: 50px; margin-bottom: 10px;" /><big><b>Crowl</big></b></html>
<b><u><<=passage()>></u></b>
<i>You continue further to the clanking and sounds of forced fusion. You see a plethora of tables with odds and ends of repurposed materials. A blacksmith nearby yells out after noticing you:</i>
<i><b>"YA frae to use, just bring your own supplies to bully!"</b></i>
<sub><u>Return.</u></sub>
- [[Back to Workshop|Workshop]]

<u><b>Choose an item to craft:</b></u>>
<div id="crafting-interface">
    <<include "CraftingUI">>
</div>


:: CraftingUI {"position":"2800,850","size":"100,100"}
<ul>
    <<for _item, _materials range setup.recipes>>
        <<capture _materials _item>>
            <li>_item (Requires: <<for _mat, _num range _materials>><<= _mat + " x" + _num + " ">><</for>>)
                <<if $materials.compare(_materials)>>
                    <<button "Craft">>
                        <<run $materials.unmerge(_materials)>>
                        <<pickup $equipment _item 1>>
                        <<replace "#crafting-interface">><<include "CraftingUI">><</replace>>
                    <</button>>
                <<else>>
                    Not enough materials.
                <</if>>
            </li>
        <</capture>>
    <</for>>
</ul>


:: Crowl Opener {"position":"1100,0","size":"100,100"}
[[North Gate|North Gate]]


:: DO NOT TOUCH BELOW [DO-NOT-TOUCH-BELOW] {"position":"0,0","size":"100,100"}



:: Dock.1 [Outside] {"position":"500,1300","size":"200,200"}
<html><img src="https://inklings.live/Twines/icons/abstract-062.svg" alt="<<_item1.name>> icon" style="width: 50px; height: 50px; margin-bottom: 10px;" /><big><b>Crowl</big></b></html>
<b><u><<=passage()>></u></b>
Fresh sea breeze rushes your nostrils. The scent of worn copper passing many hands lingers.

<b><i>Where to?</i></b>
- [[Central Road|T3]] 
- [[Quarters|DockQrts]] 
- [[MerchantGuild]] 
- [[Southern Dock|Dock.2]]
<sub><u>To Moon Dock</u></sub>
- [[Moon Pass|T4]]


:: Dock.2 [Outside] {"position":"300,1600","size":"100,200"}
<html><img src="https://inklings.live/Twines/icons/abstract-062.svg" alt="<<_item1.name>> icon" style="width: 50px; height: 50px; margin-bottom: 10px;" /><big><b>Crowl</big></b></html>
<b><u><<=passage()>></u></b>
Fresh sea breeze rushes your nostrils. The scent of worn copper passing many hands lingers.

<b><i>Where to?</i></b>
- [[Northern Dock|Dock.1]]
- [[Quarters|DockQrts]] 
- [[MerchantGuild]] 
- [[Homes]]


:: DockQrts [Outside] {"position":"700,1700","size":"200,200"}
<html><img src="https://inklings.live/Twines/icons/abstract-062.svg" alt="<<_item1.name>> icon" style="width: 50px; height: 50px; margin-bottom: 10px;" /><big><b>Crowl</big></b></html>
<b><u><<=passage()>></u></b>
Spwarling with live of all kinds is the coastal neighborhood of Crowl. Some are well off, then others just linger...

<b><i>Where to?</i></b>
- [[Central Road|T3]] 
- [[Northern Dock|Dock.1]] 
- [[Southern Dock|Dock.2]]
- [[MerchantGuild]]
- [[Homes]]


:: Dream {"position":"550,0","size":"100,100"}
<h2>Late that Night</h2>
<<fadein 10s>>The voices drift into your half-conscious mind—snatches of conversations that sound like riddles folded over riddles. You aren’t sure who’s speaking, but the tales are clear enough. They whisper of Crowl, of merchants who speak in riddles, cursed bazaars where every bargain costs more than coin, and a mayor whose smile could hide a dagger. Someone mutters about a "cart without wheels, sitting forever at a farmhouse, its price rising like a snake uncoiling in the sun."<</fadein>>

<<fadein 5s 11s>>[[Then you hear the strangest thing of all.|Listen...]]<</fadein>>


:: End {"position":"3825,1500","size":"100,100"}
Years pass ... 

There's a new life, a new home, a new profession, new children, Everything changes, and you are happy, but sometimes you miss the rhythm of the farm ...

! THE END


:: End Game {"position":"825,275","size":"100,100"}
\::End Game
<h1>The Cart Without Wheels is Yours!</h1>
<p>You’ve finally acquired the cart... and with it, the dream of creating The Merchant Mile feels closer than ever.</p>
<p>But deep down, you know—this is only the beginning of a grander journey.</p>

<p>(To be continued...)</p>


:: EndIntro {"position":"950,0","size":"100,100"}
<!-- Background image styling -->
<style>
  #passage {
    background-image: url('images/background.jpg'); /* Replace with your background image path */
    background-size: cover;
    background-position: center;
    color: white;
    padding: 20px;
    font-family: 'Georgia', serif;
    text-shadow: 1px 1px 3px black;
  }
</style>

<!-- Passage Content -->
<h1>Opener</h1>
<u><h3>Crowl: The Merchant’s Gateway</h3></u>
<i>
Nestled along the southern coast of Vanqui(i), Crowl is a town on the edge of change. 
It’s a bustling hub for traders, wanderers, and schemers—a place where fortunes are made and lost 
with each passing day. Though the town appears ordinary to the untrained eye, 
nothing in Crowl is ever exactly as it seems. Whispers travel through the streets like invisible threads, 
connecting everyone to something bigger.
</i>

[[ Crowl Intro|Crowl Opener]]


:: EquipmentInventory {"position":"2800,1050","size":"100,100"}
<<inv $equipment>>


:: Ex 3 {"position":"3400,700","size":"100,100"}
<<set $rndchest1 = $rndchest1 || false>> <!-- Initialize chest flag -->
<<set _secretNumber = random(1, 5)>> <!-- Generate a secret number between 1 and 5 -->
<<set $focus = $focus || 100>> <!-- Initialize focus if not already set -->
<<set _guessCount = _guessCount || 0>> <!-- Initialize guess counter -->
<<set $sidebarMessage = $sidebarMessage || "There's a mysterious chest nearby." >> <!-- Initial sidebar message -->

<p>A locked chest lies before you. Guess the correct number to open it.</p>

<!-- Only show input and button if chest hasn’t been opened -->
<<if !$rndchest1>>
    <<textbox "_guess" "" placeholder="Enter a number">> <!-- Input for player’s guess with a placeholder -->
    <<button "Try">>
        <<set _guess = _guess.trim()>>
        <<set _guessCount += 1>> <!-- Increment guess counter -->
        
        <<if _guess == _secretNumber.toString()>>
            <<pickup $player "golden key" 1>>
            <<set $rndchest1 = true>> <!-- Lock the chest after success -->
            <<set $sidebarMessage = "You successfully unlocked the chest and found a golden key!">> <!-- Update sidebar -->
            <<replace "#result">>
                <p>Correct! You unlock the chest and find a **golden key**!</p>
            <</replace>>
            <<replace "#attempts">>
                <p>You successfully opened the chest after <strong><<= _guessCount >></strong> tries!</p>
                <p><<link "Go back">>[[PreviousPage]]<</link>></p> <!-- Link to go back -->
            <</replace>>
            <<replace "#button-area">>
                <p style="color: gray;">The chest is now empty.</p> <!-- Display empty message -->
            <</replace>>
        <<else>>
            <<set $focus -= 5>> <!-- Deduct 5 focus points on failure -->
            <<replace "#result">>
                <p>Incorrect! The lock doesn’t budge. Your focus is now <strong><<=$focus>></strong>.</p>
            <</replace>>
        <</if>>
    <</button>>
<</if>>

<!-- Button area, replaces with an empty message after success -->
<div id="button-area">
    <<if $rndchest1>>
        <p style="color: gray;">The chest is now empty.</p>
    <</if>>
</div>

<div id="result"></div> <!-- Placeholder for the result message -->
<div id="attempts"></div> <!-- Placeholder for attempts or success message -->


:: Examples {"position":"3200,700","size":"100,100"}
<<link "Steak" "Next Passage">>
    <<set $multipleChoiceSelection to 'Steak'>>
    <<run send_multiple_choice()>>
<</link>>

→ Example setup
I saw a <span id="dog">dog</span>.

→ Append to the contents of the target element
<<link "Doing">>
	<<append "#dog" t8n>> chasing a cat<</append>>
<</link>>

→ Result, after clicking
I saw a <span id="dog">dog<span class="macro-append-insert"> chasing a cat</span></span>.

→ Example setup
I saw a <span id="dog">dog</span>.

→ Prepend to the contents of the target element
<<link "Size">>
	<<prepend "#dog">>big <</prepend>>
<</link>>

→ Result, after clicking
I saw a <span id="dog">big dog</span>

<<linkreplace "You'll //never// take me alive!" t8n>>On second thought, don't hurt me.<</linkreplace>>

The answer to the //Ultimate Question of Life, the Universe, and Everything// is?
<<listbox "$lbanswer" autoselect>>
	<<option "Towel">>
	<<option "π" 3.14159>>
	<<option 42>>
	<<option 69>>
	<<option "∞" Infinity>>
<</listbox>>

→ Creates a text box that modifies $pie
What's your favorite pie? <<textbox "$pie" "Blueberry">>

→ Creates a text box that modifies $pie and forwards to the "Cakes" passage
What's your favorite pie? <<textbox "$pie" "Blueberry" "Cakes">>

→ Creates a number box that modifies $wager
Wager how much on Buttstallion in the race? <<numberbox "$wager" 100>>

→ Creates an automatically focused number box that modifies $wager
Wager how much on Buttstallion in the race? <<numberbox "$wager" 100 autofocus>>

What's your favorite pie?
* <<radiobutton "$pie" "blueberry" checked>> Blueberry?
* <<radiobutton "$pie" "cherry">> Cherry?
* <<radiobutton "$pie" "coconut cream">> Coconut cream?

hat's your favorite pie?
* <label><<radiobutton "$pie" "blueberry" checked>> Blueberry?</label>
* <label><<radiobutton "$pie" "cherry">> Cherry?</label>
* <label><<radiobutton "$pie" "coconut cream">> Coconut cream?</label>

→ Creates a text block that modifies $pieEssay
Write a short essay about pies:
<<textarea "$pieEssay" "">>


:: Examples 2 {"position":"3300,700","size":"100,100"}
→ Given the following
I'd like a <span id="huge-cupcake">humongous </span>cupcake, please.

→ Remove the target element
<<link "Go small">>
	<<remove "#huge-cupcake">>
<</link>>

→ Result, after the click
I'd like a cupcake, please.

→ Example setup
I saw a <span id="dog">dog</span>.

→ Replace the contents of the target element
<<link "Breed">>
	<<replace "#dog" t8n>>Catahoula Cur<</replace>>
<</link>>

→ Result, after clicking
I saw a <span id="dog"><span class="macro-replace-insert">Catahoula Cur</span></span>.


:: Farm {"position":"3425,1250","size":"100,100"}
! $season (year $season.count)

It's $season, down on the farm, and as ever there's things to do.

<<nobr>>
	<<set _events = MQBN.getStorylets(3)>>
    <<if _events.length>>
      <ul>
      <<for _event range _events>>
          <li><<storyletlink _event>><</storyletlink>></li>
      <</for>>
      </ul>
    <<else>>
    	Although, in fact, there is nothing to do //this// season. <<link [[Advance to next season|Farm]]>>
        	<<sequenceadvance "$season">>
        <</link>>
    <</if>>
<</nobr>>


:: FarmC {"position":"825,150","size":"100,100"}
[[View Cart]]

<if/else>

[[Wake|Wake]]


:: HallOfRecords {"position":"800,725","size":"100,100"}
Along the entirety of the walls in this room hold all the statistics of an individual, as if they were being watched. Almost every decision they've ever made has appeared here...


<div class="hall-of-records">
    <div class="stat-item">
        <img src="icon-url/focus.png" alt="Focus Icon">
        <p>Focus: <<print $focus>> / <<print $maxFocus>></p>
    </div>
    <div class="stat-item">
        <img src="icon-url/cart.png" alt="Cart Visits Icon">
        <p>Cart Visits: <<print $cartVisits>></p>
    </div>
    <div class="stat-item">
        <img src="icon-url/funds.png" alt="Funds Icon">
        <p>Funds: <<print $funds>></p>
    </div>
    <div class="stat-item">
        <img src="icon-url/prestige.png" alt="Prestige Icon">
        <p>Prestige: <<print $prestige>></p>
    </div>
    <div class="stat-item">
        <img src="icon-url/drain.png" alt="Focus Drain Icon">
        <p>Base Focus Drain: <<print $baseDrain>>%</p>
    </div>
    <div class="stat-item">
        <img src="icon-url/passages.png" alt="Passages Icon">
        <p>Passages Visited: <<print $Totalpassages>></p>
    </div>
    <div class="stat-item">
        <img src="icon-url/rent.png" alt="Rent Icon">
        <p>Daily Rent: <<print $rent>></p>
    </div>
</div>



- <<link "Main Hall">>
    <<goto "MayorOffice">>
<</link>>


:: Harvest {"position":"3575,1375","size":"100,100"}
You join the women and children harvesting the orchard, shaking the trees to bring down the apples and then gathering them in broad woven baskets. All this will go to ale, or to feed the pigs.

<<if !MQBN.played("Leave")>>As you head home, Rowan catches your eye and smiles shyly.
<</if>>\

<<link [[Back to the Farm|Farm]]>><<sequenceadvance "$season">><</link>>


:: Homes [Outside] {"position":"700,1975","size":"200,100"}
<html><img src="https://inklings.live/Twines/icons/abstract-062.svg" alt="<<_item1.name>> icon" style="width: 50px; height: 50px; margin-bottom: 10px;" /><big><b>Crowl</big></b></html>
<b><u><<=passage()>></u></b>
<b><i>Where to?</i></b>
- [[Dock.2]] 
- [[DockQrts]] 
- [[Post]]


:: INTRO {"position":"300,125","size":"100,100"}
This is the <h1>NO BEEF</h1> 
<img src="https://inklings.live/Twines/MMP/BeefX.webp" alt="No Beef Icon" style="width: 50px; height: 50px;">
Alpha release.
Its core purpose is to show the idea, get a feel for th navigational taste, and filter ideas from the tester community on what would be neat to see.

<big><b><u>NEXT ALPHA RELEASE FEATURES PLANNED</u></b></big>
- I am focusing on the shopping interaction and selling with mutli factors into the benefit of who you sell to and where you shop.

- A minimal combat exp for small based encoutners.

- Gambling to earn back the $funds a little quicker or loose it all together.

- And much more!

Until then try this out imagine its potential and help me push its limits.
<sub>I appreciate your time into viewing this project.</sub>


[[Begin the Demo|Opener]]


:: Iron {"position":"2600,1500","size":"100,100"}
<<if $ironcache is true>><img src="https://inklings.live/Twines/icons/hand%20%(2).svg" alt="Hand icon" style="width: 50px; height: 50px; margin-bottom: 10px;" /><</if>>
<<if $equipment.has("pickaxe")>><html><img src="https://inklings.live/Twines/icons/battered-axe.svg" alt="Axe icon" style="width: 50px; height: 50px; margin-bottom: 10px;" /><big><b>Wilds</big></b></html><</if>>
<b><u><<=passage()>></u></b>
Iron: @@#mats;<<= $materials.count("iron")>>@@
You head to the mouth of the mine, darkness greets you ahead...

<<if ($focus >= 90) && ($ironcache is true)>>A small cache of Iron lies at the entrance unclaimed!
@@#Gather;<<button "Gather">>
 <<pickup $materials "iron" 8>>
    <<replace "#mats">><<= $materials.count("iron")>><</replace>>
    <<set $ironcache to false>>
    <<run $("#Gather button").prop("disabled", true)>>
<</button>>@@<<else>>
No loose iron nearby.
<</if>>

<<if $focus >= 10>>
    <<if $equipment.has("pickaxe")>>
        <<button "Use the pickaxe">>
            <<set $focus -= 5>>  <!-- Decrease focus -->
            <<pickup $materials "iron" 1>>  <!-- Add 1 iron to inventory -->
           <<replace "#mats">><<= $materials.count("iron")>><</replace>>
            <<if $focus <= 0>>
                <p style="color:red;">
                    You're on the verge of blacking out! If you don’t restore your focus, the next action will cause a blackout!
                </p>
            <</if>>
        <</button>>
    <<else>>
        <p>You don't have the right tools to gather iron&hellip;</p>
    <</if>>
<</if>>

<<if $focus < 10>>
    <p>Your focus is too low for this task. You need at least 10 focus to continue.</p>
<</if>>

[[Back to Crowl|SouthGate]]


:: JewelerBuy {"position":"900,1600","size":"100,100"}
<h2>Items for sale:</h2>


[[Go back|Jewelers]]


:: JewelerSell {"position":"1000,1600","size":"100,100"}
<h2>Items on hand:</h2>


[[Go back|Jewelers]]


:: Jewelers [Indoor] {"position":"900,1450","size":"200,100"}
<html><img src="https://inklings.live/Twines/icons/abstract-062.svg" alt="<<_item1.name>> icon" style="width: 50px; height: 50px; margin-bottom: 10px;" /><big><b>Crowl</big></b></html>
<b><u><<=passage()>></u></b>
A fine looking establishment, oddly though adhesive strips seem to be patching a massive part of the west wall...

<big><b>Business </b></big>
[[JewelerBuy]] 
[[JewelerSell]] 

<b><i>Where to?</i></b>
- <<link "Center of Town">>
    <<goto "T3">>
<</link>>


:: JimsTavern [Indoor] {"position":"1500,850","size":"100,100"}
<html><img src="https://inklings.live/Twines/icons/abstract-062.svg" alt="<<_item1.name>> icon" style="width: 50px; height: 50px; margin-bottom: 10px;" /><big><b>Crowl</big></b></html>
<b><u><<=passage()>></u></b>
<b><i>Where to?</i></b>
- [[South Pass|T2]]


:: Leave {"position":"3825,1375","size":"100,100"}
Time has passed, as it ever does, but you can't shake the memory of that stolen kiss.

There's no future here for you and Rowan — your families are sworn rivals. There's only one option, to steal away together and make a new life, far from here.

The plans are all made. Rowan will be waiting by the Lychgate once more. If you don't go now, you never will. You have to decide

* [[Leave|End]]
* [[Stay|Farm]]


:: Listen... {"position":"675,0","size":"100,100"}
<<fadein 5s 1s>>
	<<fadeout 5s 6s>>
"The cart calls. It waits for someone foolish enough to answer. Buy it once, and you’re cursed to buy it again... and again... until nothing remains but desire itself.”
	<</fadeout>>
<</fadein>>
<<fadein 2s 6s>>
[[Wake yourself up.|Wake]] <br> [[Sleep through it.|FarmC]]
<</fadein>>


:: Loc1 [Indoor] {"position":"1600,400","size":"200,100"}
<html><img src="https://inklings.live/Twines/icons/abstract-062.svg" alt="<<_item1.name>> icon" style="width: 50px; height: 50px; margin-bottom: 10px;" /><big><b>Crowl</big></b></html>
<b><u><<=passage()>></u></b>
<<pickup $player 'potion' 2>>  <!-- Add 2 potions to the player -->
<<pickup $player 'elixir' 1>>  <!-- Add 1 elixir to the player -->

<b><i>Where to?</i></b>
- [[To Square|Square]]
- [[Well|Well]]


:: Loc2 [Indoor] {"position":"1700,800","size":"200,100"}
<html><img src="https://inklings.live/Twines/icons/abstract-062.svg" alt="<<_item1.name>> icon" style="width: 50px; height: 50px; margin-bottom: 10px;" /><big><b>Crowl</big></b></html>
<b><u><<=passage()>></u></b>
As you linger by the buildings nearby you hear tinks, and hammering nearby...

<b><i>Where to?</i></b>
[[To Square|Square]]
[[Well|Well]]
[[SoundsofCreation|Workshop]]


:: Lower Slums [Outside] {"position":"2100,900","size":"100,200"}
<html><img src="https://inklings.live/Twines/icons/abstract-062.svg" alt="<<_item1.name>> icon" style="width: 50px; height: 50px; margin-bottom: 10px;" /><big><b>Crowl</big></b></html>
<b><u><<=passage()>></u></b>
<b><i>Where to?</i></b>
-<<link " South">>
    <<goto "SouthGate">>
<</link>>
- [[Slums]]
- [[CityFarm]]


:: M&M Services {"position":"300,2200","size":"100,100"}
\:: Bank Actions
Enter the amount to deposit or withdraw:

<input type="number" id="transactionAmount" placeholder="Enter amount">
<!-- Deposit Button -->
<<button "Deposit">>
    <<bankTransaction "deposit" "Merchant Guild">>
<</button>>
<!-- Withdraw Button -->
<<button "Withdraw">>
    <<bankTransaction "withdraw" "Merchant Guild">>
<</button>>
<!-- Display Transaction Result Here -->
<div id="transactionResult">Make a transaction to see the result here.</div>

[[View Statements|Transactions]]
<b><i>Back</i></b>
- <<link "Main Hall">>
    <<goto "MerchantGuild">>
<</link>>


:: Market [nobr] {"position":"3625,1700","size":"100,100"}
<html><img src="https://inklings.live/Twines/icons/abstract-062.svg" alt="<<_item1.name>> icon" style="width: 50px; height: 50px; margin-bottom: 10px;" /><big><b>Crowl</big></b></html>
<!-- Filter items by "bazaar" category and shuffle to pick 6 random items -->
<<set $bazaarItems to $allItems.filter(item => item.category === "bazaar")>>
<<set $displayItems to $bazaarItems.slice().sort(() => Math.random() - 0.5).slice(0, 6)>> <!-- Shuffle and select 6 items -->

\:: BazaarShopTest
<!-- Setting up feedback area for purchase confirmation -->
<div id="feedback" style="width: 100%; margin-bottom: 15px; color: green;"></div>

<!-- Display each item with manual purchase links -->
<div style="display: grid; grid-template-columns: repeat(3, 1fr); gap: 20px;">

    <!-- Item 1 -->
    <<set _item1 to $displayItems[0]>>
    <div>
        <img @src="_item1.icon" style="width: 50px; height: 50px; margin-bottom: 10px;">
        <strong><<=_item1.name>></strong> - Price: <<=_item1.value>> funds<br>
        <<link "Buy <<=_item1.name>>">>
            <<if $funds >= _item1.value>>
                <<set $funds -= _item1.value>>
                <<set $mgcoffer += Math.floor(_item1.value / 5)>>
                <<pickup $player _item1.name 1>>
                <<replace "#feedback">>You purchased <<=_item1.name>>! Funds left: <<=$funds>><</replace>>
            <<else>>
                <<replace "#feedback">>Not enough funds to buy <<=_item1.name>><</replace>>
            <</if>>
        <</link>>
    </div>

    <!-- Item 2 -->
    <<set _item2 to $displayItems[1]>>
    <div>
        <img @src="_item2.icon" style="width: 50px; height: 50px; margin-bottom: 10px;">
        <strong><<=_item2.name>></strong> - Price: <<=_item2.value>> funds<br>
        <<link "Buy <<=_item2.name>>">>
            <<if $funds >= _item2.value>>
                <<set $funds -= _item2.value>>
                <<set $mgcoffer += Math.floor(_item2.value / 5)>>
                <<pickup $player _item2.name 1>>
                <<replace "#feedback">>You purchased <<=_item2.name>>! Funds left: <<=$funds>><</replace>>
            <<else>>
                <<replace "#feedback">>Not enough funds to buy <<=_item2.name>><</replace>>
            <</if>>
        <</link>>
    </div>

    <!-- Item 3 -->
    <<set _item3 to $displayItems[2]>>
    <div>
        <img @src="_item3.icon" style="width: 50px; height: 50px; margin-bottom: 10px;">
        <strong><<=_item3.name>></strong> - Price: <<=_item3.value>> funds<br>
        <<link "Buy <<=_item3.name>>">>
            <<if $funds >= _item3.value>>
                <<set $funds -= _item3.value>>
                <<set $mgcoffer += Math.floor(_item3.value / 5)>>
                <<pickup $player _item3.name 1>>
                <<replace "#feedback">>You purchased <<=_item3.name>>! Funds left: <<=$funds>><</replace>>
            <<else>>
                <<replace "#feedback">>Not enough funds to buy <<=_item3.name>><</replace>>
            <</if>>
        <</link>>
    </div>

    <!-- Item 4 -->
    <<set _item4 to $displayItems[3]>>
    <div>
        <img @src="_item4.icon" style="width: 50px; height: 50px; margin-bottom: 10px;">
        <strong><<=_item4.name>></strong> - Price: <<=_item4.value>> funds<br>
        <<link "Buy <<=_item4.name>>">>
            <<if $funds >= _item4.value>>
                <<set $funds -= _item4.value>>
                <<set $mgcoffer += Math.floor(_item4.value / 5)>>
                <<pickup $player _item4.name 1>>
                <<replace "#feedback">>You purchased <<=_item4.name>>! Funds left: <<=$funds>><</replace>>
            <<else>>
                <<replace "#feedback">>Not enough funds to buy <<=_item4.name>><</replace>>
            <</if>>
        <</link>>
    </div>

    <!-- Item 5 -->
    <<set _item5 to $displayItems[4]>>
    <div>
        <img @src="_item5.icon" style="width: 50px; height: 50px; margin-bottom: 10px;">
        <strong><<=_item5.name>></strong> - Price: <<=_item5.value>> funds<br>
        <<link "Buy <<=_item5.name>>">>
            <<if $funds >= _item5.value>>
                <<set $funds -= _item5.value>>
                <<set $mgcoffer += Math.floor(_item5.value / 5)>>
                <<pickup $player _item5.name 1>>
                <<replace "#feedback">>You purchased <<=_item5.name>>! Funds left: <<=$funds>><</replace>>
            <<else>>
                <<replace "#feedback">>Not enough funds to buy <<=_item5.name>><</replace>>
            <</if>>
        <</link>>
    </div>

    <!-- Item 6 -->
    <<set _item6 to $displayItems[5]>>
    <div>
        <img @src="_item6.icon" style="width: 50px; height: 50px; margin-bottom: 10px;">
        <strong><<=_item6.name>></strong> - Price: <<=_item6.value>> funds<br>
        <<link "Buy <<=_item6.name>>">>
            <<if $funds >= _item6.value>>
                <<set $funds -= _item6.value>>
                <<set $mgcoffer += Math.floor(_item6.value / 5)>>
                <<pickup $player _item6.name 1>>
                <<replace "#feedback">>You purchased <<=_item6.name>>! Funds left: <<=$funds>><</replace>>
            <<else>>
                <<replace "#feedback">>Not enough funds to buy <<=_item6.name>><</replace>>
            <</if>>
        <</link>>
    </div>

</div>




[[ShopRnd2]]


:: MaterialInventory {"position":"2800,950","size":"100,100"}
<<inv $materials>>


:: MayorOffice [Indoor] {"position":"700,500","size":"200,200"}
<html><img src="https://inklings.live/Twines/icons/abstract-062.svg" alt="<<_item1.name>> icon" style="width: 50px; height: 50px; margin-bottom: 10px;" /><big><b>Crowl</big></b></html>
<b><u><<=passage()>></u></b>
<b><i>Where to?</i></b>
- [[CBridgeA]] 
<sub><u>Offices</u></sub>
- [[CityRegistration|CReg]]
- <<link "Storage">>
    <<goto "CStorage">>
<</link>>
- <<link "Record Hall">>
    <<goto "HallOfRecords">>
<</link>>


:: MerchantGuild [Indoor] {"position":"500,1575","size":"100,200"}
<html><img src="https://inklings.live/Twines/icons/abstract-062.svg" alt="<<_item1.name>> icon" style="width: 50px; height: 50px; margin-bottom: 10px;" /><big><b>Crowl</big></b></html>
<b><u><<=passage()>></u></b>
<b><i>Where to?</i></b>
- [[North Dock|Dock.1]] 
- [[Southern Dock|Dock.2]] 
- [[Quarters|DockQrts]] 
- [[Dock Homes|Homes]]
<sub><u>Offices</u></sub>
- [[Registration]]
- <<link "Storage">>
    <<goto "Storage">>
<</link>>
- <<link "Traders Hall">>
    <<goto "Trade Hall">>
<</link>>
- <<link "Money Services">>
    <<goto "M&M Services">>
<</link>>


:: MoonBr [Outside Special] {"position":"50,900","size":"100,100"}
<html><img src="https://inklings.live/Twines/icons/abstract-062.svg" alt="<<_item1.name>> icon" style="width: 50px; height: 50px; margin-bottom: 10px;" /><big><b>Crowl</big></b></html>
<b><u><<=passage()>></u></b>
<b><i>Where to?</i></b>
- [[Moon Dock|MoonDock]]

<sub><u>Back to Crowl.</u></sub>
- [[Moon Pass|T4]]


:: MoonDock [Outside Special] {"position":"0,750","size":"200,100"}
<html><img src="https://inklings.live/Twines/icons/abstract-062.svg" alt="<<_item1.name>> icon" style="width: 50px; height: 50px; margin-bottom: 10px;" /><big><b>Crowl</big></b></html>
<b><u><<=passage()>></u></b>
<b><i>Where to?</i></b>
- [[MoonIsle]]
- [[Moon Bridge|MoonBr]]

<sub><u>Back to Crowl.</u></sub>
- [[Moon Pass|T4]]


:: MoonIsle [Outside Special] {"position":"0,500","size":"200,200"}
<html><img src="https://inklings.live/Twines/icons/abstract-062.svg" alt="<<_item1.name>> icon" style="width: 50px; height: 50px; margin-bottom: 10px;" /><big><b>Crowl</big></b></html>
<b><u><<=passage()>></u></b>
<b><i>Where to?</i></b>
- [[Moon Dock|MoonDock]]
- [[Moon Brigde|MoonBr]]

<sub><u>Back to Crowl.</u></sub>
- [[Moon Pass|T4]]


:: Mowing {"position":"3700,1250","size":"100,100"}
It's time to mow, and you take up a scythe along with the rest, swinging it in long arcs in time to the mowing song.

<<link [[Back to the Farm|Farm]]>><<sequenceadvance "$season">><</link>>


:: NextPath {"position":"2900,225","size":"100,100"}
\:: Dream Sequence
<div id="typewriter-container" class="typewriter"></div>

<<script>>
    $(document).one(':passagedisplay', function () {
        const container = document.getElementById('typewriter-container');
        const text = "The voices drift into your half-conscious mind—snatches of conversations that sound like riddles folded over riddles. They whisper of Crowl, cursed bazaars, and a cart that binds those foolish enough to desire it.";

        typewriter(container, text, 50);
    });

    function typewriter(element, text, speed) {
        let i = 0;
        element.innerHTML = '';  // Clear content before typing.
        function type() {
            if (i < text.length) {
                element.innerHTML += text.charAt(i);
                i++;
                setTimeout(type, speed);
            }
        }
        type();
    }
<</script>>

[[Wake up.|NextPath]]


:: North Gate [Outside] {"position":"1400,200","size":"100,100"}
<html><img src="https://inklings.live/Twines/icons/abstract-062.svg" alt="<<_item1.name>> icon" style="width: 50px; height: 50px; margin-bottom: 10px;" /><big><b>Crowl</big></b></html>
<b><u><<=passage()>></u></b>

<h3>Crowl’s Key Locations</h3>
*<b> The Bazaar:</b> Enchanted wares and mysterious artifacts are sold, each item hiding a secret enchantment or curse.
*<b> The Dripping Kettle Tavern:</b> The heart of the town, where deals are made over drink. Owned by Jim—who is definitely not the original owner.
*<b> Merchant Guild Office:</b> A front for a hidden organization, with deep connections to the city's shadowy underbelly.
*<b> The Well:</b> A mysterious well said to hold the lost secrets of the giants, a remnant of a forgotten age.

<b><i>Where to?</i></b>
- [[Travelers Square|Square]]
-<<link " Toward the Slums...">>
    <<goto "Slums">>
<</link>>


:: North Gate T. {"position":"1475,0","size":"100,100"}
Whatever pull this cart has its strong, and now you realize how strong....





[[Continue to North Gates|North Gate]]
[[Walk along the river.|River]]


:: NoticeRandom {"position":"3350,975","size":"100,100"}
<p>You notice something glinting under the rubble. 
<<link "Investigate">>
    <<pickup $player "key to the airship" 1>> <!-- Adds the key to the backpack -->
    You found a **key to the airship**!
<</link>>
</p>


:: Ongoing Conversation {"position":"2900,100","size":"100,100"}
\:: Conversation
<div id="npc-response" class="response-box">
    <p>"So, what brings you to Crowl?"</p>  <!-- Initial question -->
</div>

<div id="npc-image" class="image-box">
    <img src="https://inklings.live/Twines/MMP/mapgui/SouthGate.webp" alt="The merchant smiles" />
</div>

<div id="player-choices" class="choices">
    <<button "Ask about the cart">>
        <<set $conversationStep to 1>>
        <<replace "#npc-response">>
            <div id="npc-response" class="response-box">
                <p>"Ah, the cart! Yes, the one without wheels... its price rises like a snake basking in the sun."</p>
            </div>
        <</replace>>
        <<replace "#npc-image">>
            <div id="npc-image" class="image-box">
                <img src="https://inklings.live/Twines/MMP/mapgui/SouthGate.webp" alt="An old, wheel-less cart." />
            </div>
        <</replace>>
        <<replace "#player-choices">>
            <div id="player-choices" class="choices">
                <<button "Why does the price keep rising?">>
                    <<set $conversationStep to 2>>
                    <<replace "#npc-response">>
                        <div id="npc-response" class="response-box">
                            <p>"It’s a curse, they say. Every time you look at it, your desire to buy it grows."</p>
                        </div>
                    <</replace>>
                    <<replace "#npc-image">>
                        <div id="npc-image" class="image-box">
                            <img src="images/cursed_cart.jpg" alt="The cursed cart glowing faintly." />
                        </div>
                    <</replace>>
                    <<replace "#player-choices">>
                        <div id="player-choices" class="choices">
                            <<button "I don't believe in curses.">>
                                <<set $path to "doubt">>
                                <<replace "#npc-response">>
                                    <div id="npc-response" class="response-box">
                                        <p>"Suit yourself. Everyone who thought the same came back with regrets."</p>
                                    </div>
                                <</replace>>
                                <<replace "#npc-image">>
                                    <div id="npc-image" class="image-box">
                                        <img src="images/merchant_warning.jpg" alt="The merchant shrugs." />
                                    </div>
                                <</replace>>
                                <<replace "#player-choices">>
                                    <div id="player-choices" class="choices">
                                        [[Continue.|NextPath]]
                                    </div>
                                <</replace>>
                            <</button>>
                        </div>
                    <</replace>>
                <</button>>
            </div>
        <</replace>>
    <</button>>

    <<button "Say you're just passing through">>
        <<set $path to "passing">>
        <<replace "#npc-response">>
            <div id="npc-response" class="response-box">
                <p>"Just passing through, eh? Crowl’s the kind of place that sticks with you, whether you like it or not."</p>
            </div>
        <</replace>>
        <<replace "#npc-image">>
            <div id="npc-image" class="image-box">
                <img src="images/crowl.jpg" alt="The misty streets of Crowl." />
            </div>
        <</replace>>
        <<replace "#player-choices">>
            <div id="player-choices" class="choices">
                [[Continue.|NextPath]]
            </div>
        <</replace>>
    <</button>>
</div>


:: Opener {"position":"300,0","size":"100,100"}
\:: Prologue

Test??


<<fadein 5s 1s>>\
        "The Wishbone hums with the sound of murmuring voices, the low crackle of a campfire, and the occasional clink of worn coin. It’s the kind of place where travelers meet on accident, stay too long by misfortune, and leave with stories they’ll never tell the same way twice. Tonight, a subtle sense of unease lingers in the air, carried by the way the flames dance just a bit too wildly in the evening breeze."!\
<</fadein>>

[[While at the Wishbone...|Wishbone]]


:: PInventory {"position":"2800,750","size":"100,100"}
<<inv $player use drop inspect all filter>>


:: Planting {"position":"3825,1250","size":"100,100"}
The spring thaw has softened the dark loam of the fields, so its time to plant the spring corn. The farm horses turn the furrows, and you follow behind, scattering seed till the light fails.

<<link [[Back to the Farm|Farm]]>><<sequenceadvance "$season">><</link>>


:: PlayerStats {"position":"2925,850","size":"100,100"}
Focus: <<print $focus>>
Funds: <<print $funds>>
Prestige: <<print $prestige>>


:: Post [Indoor] {"position":"1200,1500","size":"200,200"}
<html><img src="https://inklings.live/Twines/icons/abstract-062.svg" alt="<<_item1.name>> icon" style="width: 50px; height: 50px; margin-bottom: 10px;" /><big><b>Crowl</big></b></html>
<b><u><<=passage()>></u></b>
<b><i>Where to?</i></b>
- <<link "Center of Town">>
    <<goto "T3">>
<</link>>
- [[Homes]] 
- [[DockQrts]]


:: PreviousPage {"position":"3400,825","size":"100,100"}



:: Registration {"position":"200,2000","size":"100,100"}
<b><i>A long desk made of mahogony is present, on it three different stacks of aggressive paperwork. The current receptionist reacts to your arrival:</i></b>
<<set _greetings = [
    "Hi traveler, looks like you're in the trade.",
    "Welcome, please take a form and return it with the proper funds.",
    "Good to see you again, what’s your business today?",
    "Ah, another seeker of fortune. You’ll need a license for that.",
    "Greetings, merchant. May your trade be prosperous!"
]>>
<div style="display: flex; gap: 10px; justify-content: center; margin-top: 20px;">

    <!-- Entry License -->
    <div style="width: 200px; padding: 10px; border: 1px solid #ccc; text-align: center;">
        <<message 'Entry' btn>>
        <h3>Entry License</h3>
        <p>Cost: 45 Focus, 100 Funds</p>
        <p>Description: A basic license for entry-level merchants.</p>
        <<if $hasEntryLicense>>
            <p style="color: gray;">Already have this license.</p>
        <<else>>
            <<if $focus >= 45 && $funds >= 100>>
                <<link "Purchase Entry License">>
                    <<set $focus -= 45>>
                    <<set $funds -= 100>>
                    <<set $hasEntryLicense = true>>
                    <<replace "#confirmation">>You purchased the Entry License!<</replace>>
                <</link>>
            <<else>>
                <p style="color: gray;">Not enough resources</p>
            <</if>>
        <</if>>
        <</message>>
    </div>

    <!-- Middleman License -->
    <div style="width: 200px; padding: 10px; border: 1px solid #ccc; text-align: center;">
 <<message 'Middleman' btn>>      
  <h3>Middleman License</h3>
        <p>Cost: 60 Focus, 500 Funds</p>
        <p>Description: A license for experienced traders facilitating larger transactions.</p>
        <<if $hasMiddlemanLicense>>
            <p style="color: gray;">Already have this license.</p>
        <<else>>
            <<if $focus >= 60 && $funds >= 500>>
                <<link "Purchase Middleman License">>
                    <<set $focus -= 60>>
                    <<set $funds -= 500>>
                    <<set $hasMiddlemanLicense = true>>
                    <<replace "#confirmation">>You purchased the Middleman License!<</replace>>
                <</link>>
            <<else>>
                <p style="color: gray;">Not enough resources</p>
            <</if>>
        <</if>>
        <</message>>
    </div>

    <!-- Prestige License -->
    <div style="width: 200px; padding: 10px; border: 1px solid #ccc; text-align: center;">
         <<message 'Pretige' btn>>
        <h3>Prestige License</h3>
        <p>Cost: 85 Focus, 1200 Funds</p>
        <p>Description: An elite license, allows resetting with Prestige 1 active.</p>
        <<if $hasPrestigeLicense>>
            <p style="color: gray;">Already have this license.</p>
        <<else>>
            <<if $focus >= 85 && $funds >= 1200>>
                <<link "Purchase Prestige License">>
                    <<set $focus -= 85>>
                    <<set $funds -= 1200>>
                    <<set $hasPrestigeLicense = true>>
                    <<set $prestige = 1>>  <!-- Activate Prestige 1 -->
                    <<replace "#confirmation">>You purchased the Prestige License!<</replace>>
                <</link>>
            <<else>>
                <p style="color: gray;">Not enough resources</p>
            <</if>>
        <</if>>
        <</message>>
    </div>

</div>

<div id="confirmation" style="text-align: center; margin-top: 20px;">
    <!-- This will display purchase confirmations -->
</div>




<b><i>Back</i></b>
- <<link "Main Hall">>
    <<goto "MerchantGuild">>
<</link>>


:: River {"position":"1625,0","size":"100,100"}
Reflection

*Here you see your progression throughout the game.

[[North Gate]]


:: ShopRnd1 {"position":"3400,1700","size":"100,100"}
<!-- Randomly select a single item from the $allItems list -->
<<set _randomItem to $allItems.random()>>

<div class="shop">
    <div id="feedback"></div> <!-- Message area for purchase feedback -->

    <!-- Display the randomly chosen item -->
    <div class="item">
        <strong><<=_randomItem.name>></strong><br>
        <<=_randomItem.description>><br>
        Price: <<=_randomItem.value>> coins<br>
        
        <<button "Buy">>
            <<if $funds >= _randomItem.value>>
                <<set $funds -= _randomItem.value>>
                <<pickup $player _randomItem.name 1>> <!-- Add the random item to inventory -->
                <<replace "#feedback">>You purchased <<=_randomItem.name>>!<</replace>>
            <<else>>
                <<replace "#feedback">>Not enough coins for this item.<</replace>>
            <</if>>
        <</button>>
    </div>
</div>
[[BazaarShop]]


:: ShopRnd2 {"position":"3500,1700","size":"100,100"}
\:: RandomItemShop
<!-- This passage displays one random item for sale each time it's accessed -->

<<set _randomItem to $allItems.random()>>

<div class="shop">
    <div id="feedback"></div> <!-- Message area for purchase feedback -->

    <!-- Display the randomly chosen item -->
    <div class="item">
        <strong><<=_randomItem.name>></strong><br>
        <<=_randomItem.description>><br>
        Price: <<=_randomItem.value>> coins<br>
        
        <<button "Buy">>
            <<if $funds >= _randomItem.value>>
                <<set $funds -= _randomItem.value>>
                <<pickup $player _randomItem.name 1>> <!-- Add the random item to inventory -->
                <<replace "#feedback">>You purchased <<=_randomItem.name>>!<</replace>>
            <<else>>
                <<replace "#feedback">>Not enough coins for this item.<</replace>>
            <</if>>
        <</button>>
    </div>
</div>
[[Market]]


:: Slot Machine {"position":"3225,900","size":"100,100"}
<<silently>>
<<set _slot1 to either("🗡️ Sword", "🛡️ Shield", "🧪 Potion")>>
<<set _slot2 to either("🗡️ Sword", "🛡️ Shield", "🧪 Potion")>>
<<set _slot3 to either("🗡️ Sword", "🛡️ Shield", "🧪 Potion")>>

<<if _slot1 is _slot2 and _slot2 is _slot3>>
    <<set _win to true>>
    <<set $funds += 15>>  <!-- Add winnings -->
<<else>>
    <<set _win to false>>
    <<set $funds -= 5>>  <!-- Deduct for loss -->
<</if>>
<</silently>>

<b><i>Before you a large orb appears with unique symbols of familiarity.</i></b>

<<timed 1s>>
<<print _slot1>>
<<next>><<print _slot2>>
<<next>><<print _slot3>>
<<next>>

YOU <<if _win>>WIN<<else>>LOSE<</if>>!

Your money now: <<print $funds>>

[[Once again!->Slot Machine]]
[[Stop gambling!]]
<</timed>>


:: Slums [Indoor] {"position":"2000,200","size":"100,200"}
<html><img src="https://inklings.live/Twines/icons/abstract-062.svg" alt="<<_item1.name>> icon" style="width: 50px; height: 50px; margin-bottom: 10px;" /><big><b>Crowl</big></b></html>
<b><u><<=passage()>></u></b>
<b><i>Where to?</i></b>
-<<link "Toward the Norther Gate.">>
    <<goto "North Gate">>
<</link>>
- [[CityFarm]]
- [[Lower Slums]]


:: SouthGate [Outside] {"position":"1700,1000","size":"100,100"}
The southern gate of Crowl, facing the coast and nothing much more, mostly acting as a small buffer from nearby bandits south of here.

The lower slums is also accesible from here but venture those parts is <i>risky.</i>

<b><i>Where to?</i></b>
- [[To Square|Square]]
- [[Barracks|Barracks]]
- [[Bandits]]
-<<link " Toward the Slums...">>
    <<goto "Lower Slums">>
<</link>>
<sub><u>Resources</u></sub>
- [[Quarry|Stone]] 
- [[Mine|Iron]]


:: Square [Outside] {"position":"1350,400","size":"200,200"}
<html><img src="https://inklings.live/Twines/icons/abstract-062.svg" alt="<<_item1.name>> icon" style="width: 50px; height: 50px; margin-bottom: 10px;" /><big><b>Crowl</big></b></html>
<b><u><<=passage()>></u></b>
The fresh air here makes you feel like anything is possible until you witness the amount of endless merchants offering trade and barter... <i>how will you stand among them?</i>

<<if $focus >= 90>>
    <<link "Examine the hidden door">>
        You carefully examine the hidden door and discover a secret passage!</p>
        <<set $focus -= 10>> <!-- Deduct focus or apply any other effects as needed -->
    <</link>>
<</if>>


<b><i>Where to?</i></b>
<sub><u>Square Directory</u></sub>
- [[North Gate]]
- [[North Merchants|Loc1]]
- [[Well|Well]]
- [[South Merchants|Loc2]]
- [[South Gate|SouthGate]]
<sub><u>Futher Into Crowl</u></sub>
- [[To the tents|Bazaar]]
- [[North Path|T1]]
- [[South Path|T2]]


:: Stalls {"position":"2400,250","size":"100,100"}
<b><i>Do you..</i></b>
- [[Back to Barn.|CityFarm]]
- [[Look around East.|Wheatfield]]
- [[Inquire the huddle.|Caretakers]]

<sub><u>Back to Crowl</u></sub>
- [[Slums]] 
- [[Lower Slums]]


:: Stone {"position":"2500,1300","size":"100,100"}
<html><img src="https://inklings.live/Twines/icons/hand%20%(2).svg" alt="<<Hand>> icon" style="width: 50px; height: 50px; margin-bottom: 10px;" /></html><<if $equipment.has("axe")>><html><img src="https://inklings.live/Twines/icons/battered-axe.svg" alt="<<Axe>> icon" style="width: 50px; height: 50px; margin-bottom: 10px;" /><big><b>Wilds</big></b></html><</if>>
<b><u><<=passage()>></u></b>
Stones: @@#mats;<<= $materials.count("stone")>>@@
Amongst the quarry are a handeful of pockets previous visitors have had at. Perhaps theres a few loose stones for you nearby.

<<if $focus >= 80>>Loose stones are lying around!
<<button "Gather by hand">>
    <<pickup $materials "stone" 1>>
    <<replace "#mats">><<= $materials.count("stone")>><</replace>>
<</button>><<else>>
No loose stones nearby.
<</if>>

<<if $focus >= 10>>
    <<if $equipment.has("pickaxe")>>
        <<button "Use the pickaxe">>
            <<set $focus -= 5>>  <!-- Decrease focus -->
            <<pickup $materials "stone" 3>>  <!-- Add  iron to inventory -->
                 <<replace "#mats">><<= $materials.count("stone")>><</replace>>
            <<if $focus <= 0>>
                <p style="color:red;">
                    You're on the verge of blacking out! If you don’t restore your focus, the next action will cause a blackout!
                </p>
            <</if>>
        <</button>>
    <<else>>
        <p>You don't have the right tools to gather stone&hellip;</p>
    <</if>>
<</if>>

<<if $focus < 10>>
    <p>Your focus is too low for this task. You need at least 10 focus to continue.</p>
<</if>>

[[Back to Crowl|SouthGate]]


:: Stop gambling! {"position":"3162.5,1025","size":"100,100"}



:: Storage {"position":"200,2100","size":"100,100"}
<h2>On hand:</h2>\
<<give $player $storage stack all filter>>
<h2>In storage:</h2>\
<<take $storage $player stack all filter>>

- <<link "Main Hall">>
    <<goto "MerchantGuild">>
<</link>>


:: StoryCaption {"position":"0,200","size":"100,100"}
<u><big><b>Focus::</b></big></u> @@#focus;<<= $focus>>@@
<u><big><b>Funds:</b></big></u> @@#funds;<<= $funds>>@@
<<= $sidebarMessage>>


:: StoryInit {"position":"400,200","size":"100,100"}
<<set setup.storylets = [
  {
  	title: "Planting",
    desc: "Spring Planting",
    all: [ { type: "sequence", seq: "$season", name: "Spring" } ],
    sticky: true
  },
  {
  	title: "Mowing",
    desc: "Grass mowing day",
    all: [ { type: "sequence", seq: "$season", name: "Summer" } ],
    sticky: true
  },
  {
  	title: "Harvest",
    desc: "Harvest time",
    all: [ { type: "sequence", seq: "$season", name: "Autumn" } ],
    sticky: true
  },
  {
  	title: "Apple Picking",
    desc: "Picking apples in the orchard",
    all: [ { type: "sequence", seq: "$season", name: "Autumn" } ],
    sticky: true
  },
  {
  	title: "Assignation",
    desc: "Assignation",
    link: "There's work to do ... but you slip away",
    all: [ { type: "sequence", seq: "$season", op: "not", name: "Winter" } ],
    weight: 1
  },
  {
  	title: "Leave",
    link: "Leave the farm",
    all: [ 
    	{ type: "played", story: "Assignation" },
        { type: "any", any: [
        	{ type: "sequence", seq: "$season", name: "Summer" },
            { type: "sequence", seq: "$season", name: "Autumn" }
        ]}
    ],
    priority: 1,
    weight: 1
  }
]>>
<<storyletsinit>>

<<sequence "$season" cycling "Spring" "Summer" "Autumn" "Winter">>

// CORE STATS //
<<set $focus to 100>>  <!-- Initial focus value -->
<<set $maxFocus to 100>>  <!-- Max focus value -->
<<set $cartBasePrice to 1000>>  <!-- Initial cart price -->
<<set $cartPrice to $cartBasePrice>>  <!-- Current dynamic price -->
<<set $cartVisits to 0>>  <!-- Track visits to the cart -->
<<set $funds to 100>>  <!-- Starting funds -->
<<set $prestige to 0>>  <!-- Prestige level -->
<<set $baseDrain to 1>>  <!-- Base percentage focus drain per passage -->
<<set $rewardActive to false>>  <!-- Immunity state -->
<<set $rewardPassagesLeft to 0>>  <!-- Passages remaining with immunity -->
<<set $Totalpassages to 0>>  <!-- Track the number of passages visited -->
<<set $blackoutTriggered to false>> <!-- Track Black out trigger -->
<<set $depletionActive to true>>  <!-- Control whether depletion continues -->
<<set $rent to 1>> <!-- Tracks the daily living expenses from the $funds. -->
<<set $rentdue to 0>> <!-- Cost of living expenses. -->
<<set $rentnxt to 7>> <!-- Number of passages before rent is due. -->
<<set $hasEntryLicense to true>> <!-- Lic Type -->
<<set $hasMiddlemanLicense to false>> <!-- Lic Type --> 
<<set $hasPrestigeLicense to false>> <!-- Lic Type -->
<<set $rndchest1 to false>>
<<set $bankBalance to 0>>  <!-- Starting bank balance -->
<<set $ledger to []>>  <!-- Initialize ledger as an empty array -->
<<set $mgcoffer to 1000>>
<<set $ironcache to true>>
<<set $stonecache to true>>

// VARs//
<<set $redUnlocked to false>>  <!-- Track if rewards have been claimed -->
<<set $currentBook to 1>>  <!-- Track the currently selected book -->
<<set $currentPage to 0>>  <!-- Track the current page -->
<<set $conversationStep to 0>>  <!-- Track player progress in the conversation -->
<<set $path to "">>  <!-- Track the final outcome for branching -->
<<set $lastWellVisit to 0>>  <!-- Track the last visit to the well -->
<<set $wellCooldown to 10>>   <!-- Number of passages before well resets -->
<<set $spotcard to true>> <!-- Allows access to Moon Isle functions-->
<<set $passageCount to 0>>  <!-- Tracks passages to trigger refresh after 12 visits -->

// INVtories
<<newinv '$player'>>
<<newinv '$storage'>>
<<newinv '$witchesh'>>
<<newinv '$tavern'>>
<<newinv '$bazaar'>>
<<newinv '$jewelersh'>>
<<newinv '$dock1sh'>>
<<newinv '$dock2.sh'>>
<<newinv '$mdocksh'>>
<<newinv '$slums'>>
<<newinv '$mguildsh'>>
<<newinv '$loc1sh'>>
<<newinv '$loc2sh'>>
<<newinv '$wellItems'>>  <!-- Well inventory -->
//// Crafting
<<newinv $materials>>
<<newinv $equipment>>

<<set $marketItems to []>>  <!-- Stores the current selection of 5 market items -->

<<set $allItems to [
    {id: 1, name: "Kobold Scale Amulet", description: "A shiny trinket said to ward off minor misfortunes.", value: 40, icon: "https://inklings.live/Twines/png/fish-scales.png", category: "bazaar"},
    {id: 2, name: "Bag of Moonbeam Salt", description: "Salt harvested from the Moon Docks, with a faint glow.", value: 25, icon: "https://inklings.live/Twines/png/fish-scales.png", category: "bazaar"},
    {id: 3, name: "Goblin-Woven Tapestry", description: "A chaotic pattern somehow considered art by goblins.", value: 75, icon: "https://inklings.live/Twines/png/fish-scales.png", category: "bazaar"},
    {id: 4, name: "Traveler's Luck Charm", description: "Blessed by the town’s wandering witches for safe travels.", value: 60, icon: "https://inklings.live/Twines/png/fish-scales.png", category: "bazaar"},
    {id: 5, name: "Fine Silk from Misty Isles", description: "Rare fabric from the distant Misty Isles, soft as clouds.", value: 120, icon: "hhttps://inklings.live/Twines/png/fish-scales.png", category: "bazaar"},
    {id: 6, name: "Crowlian Herb Bundle", description: "A mix of herbs unique to Cape Crowl, good for trade or tea.", value: 30, icon: "https://inklings.live/Twines/png/fish-scales.png", category: "bazaar"},
    {id: 7, name: "Dwarven Forge Hammer", description: "A tiny, ceremonial hammer from the mountain smiths.", value: 50, icon: "https://inklings.live/Twines/png/fish-scales.png", category: "bazaar"},
    {id: 8, name: "Sun-Dried Kobold Jerky", description: "Spicy jerky, a local delicacy in the wilds.", value: 15, icon: "https://inklings.live/Twines/png/fish-scales.png", category: "bazaar"},
    {id: 9, name: "Wizard’s Dust Pouch", description: "Colorful dust, used for minor enchantments.", value: 45, icon: "https://inklings.live/Twines/png/fish-scales.png", category: "bazaar"},
    {id: 10, name: "Bottle of Fey Dew", description: "Captured dew from the Fairy Woodlands, shimmers in light.", value: 90, icon: "https://inklings.live/Twines/png/fish-scales.png", category: "bazaar"},
    {id: 11, name: "Bard’s Broken Lute String", description: "A relic with a mysterious tune etched in the fibers.", value: 10, icon: "https://inklings.live/Twines/icons/fish-scales.svg", category: "bazaar"},
    {id: 12, name: "Cask of Deep Ale", description: "Strong ale brewed by the Deep Dwellers. Only for the brave.", value: 55, icon: "https://inklings.live/Twines/icons/fish-scales.svg", category: "bazaar"},
    {id: 13, name: "Potion of Forgetfulness", description: "A curious potion that helps you... wait, what was this for?", value: 35, icon: "https://inklings.live/Twines/icons/potion-ball.svg", category: "bazaar"},
    {id: 14, name: "Harpy Feather Quill", description: "A quill made from a harpy’s feather. Great for intense notes.", value: 20, icon: "https://inklings.live/Twines/icons/feather.svg", category: "bazaar"},
    {id: 15, name: "Goblin Spice Sack", description: "Spicy, and possibly explosive. Handle with care.", value: 25, icon: "https://inklings.live/Twines/icons/powder-bag.svg", category: "bazaar"},
    {id: 16, name: "Merchant's Ledger Ink", description: "Premium ink for tracking your trades.", value: 5, icon: "https://inklings.live/Twines/icons/ink-swirl.svg", category: "bazaar"},
    {id: 17, name: "Fine Misty Pearl", description: "A rare, lustrous pearl from the Misty Isles’ waters.", value: 100, icon: "https://inklings.live/Twines/icons/pearl.svg", category: "bazaar"},
    {id: 18, name: "Crowlian Wood Figurine", description: "Hand-carved figurine from local artisans.", value: 30, icon: "https://inklings.live/Twines/icons/wood-pile.svg", category: "bazaar"},
    {id: 19, name: "Vial of Dream Sand", description: "A small vial said to bring vivid dreams to the user.", value: 80, icon: "https://inklings.live/Twines/icons/sandstorm.svg", category: "bazaar"},
    {id: 20, name: "Shard of Crystal Fog", description: "A fragment of a rare fog crystal, known to enhance focus.", value: 95, icon: "https://inklings.live/Twines/icons/crystal-shard.svg", category: "bazaar"},
]>>


<<set setup.recipes = new Map([
    ["axe", { wood : 8, stone :  4 }],
    ["pickaxe", { wood : 8, stone : 6 }],
    ["scythe", { wood : 10, iron : 8 }],
    ["crudepack", { wood : 4, stone :  2, fiber : 10 }],
    ["spear", { wood : 10, stone : 8, fiber : 12 }],
    ["crate", { wood : 20, iron : 20, fiber : 20 }]
])>>




<<set $resources to {
    stone: { available: true, passages: 0 },
    wood: { available: true, passages: 0 },
    iron: { available: true, passages: 0 }
}>>


// Lics
<<set $licenses = {
    entry: {
        name: "Entry License",
        description: "A basic license for entry-level merchants.",
        focusCost: 45,
        fundsCost: 100
    },
    middleman: {
        name: "Middleman License",
        description: "A license for experienced traders looking to facilitate larger transactions.",
        focusCost: 60,
        fundsCost: 500
    },
    prestige: {
        name: "Prestige License",
        description: "A prestigious license that marks the bearer as an elite merchant.",
        focusCost: 85,
        fundsCost: 1200,
        effect: "Allows resetting the game with Prestige 1 active."
    }
}>>




// LAUNCH SCRIPT
<script>
   $(document).on(':passagerender', function () {
      console.log("Passage rendered. Refreshing essential UI...");

      // Call the modified function to refresh only funds and prestige
      window.updateFocusSidebar();

      window.updateLocationNotifier();
      window.depleteFocus();
      window.updatePassageCount();
      window.checkRentDue();
   });
</script>


:: StoryMenu {"position":"0,100","size":"100,100"}
<<link "Player Stats">>
    <<run Dialog.setup("Player Stats", "player-stats"); Dialog.wiki(Story.get("PlayerStats").text); Dialog.open()>>
<</link>>
<<link "Player Inventory">>
    <<run Dialog.setup("PInventory", "inventory"); Dialog.wiki(Story.get("PInventory").text); Dialog.open()>>
<</link>>
<<link "Equipment">>
    <<run Dialog.setup("Equipment", "inventory"); Dialog.wiki(Story.get("EquipmentInventory").text); Dialog.open()>>
<</link>>
<<link "Materials">>
    <<run Dialog.setup("Materials", "inventory"); Dialog.wiki(Story.get("MaterialInventory").text); Dialog.open()>>
<</link>>


:: T1 [Outside] {"position":"975,400","size":"200,100"}
<html><img src="https://inklings.live/Twines/icons/abstract-062.svg" alt="<<_item1.name>> icon" style="width: 50px; height: 50px; margin-bottom: 10px;" /><big><b>Crowl</big></b></html>
<b><u><<=passage()>></u></b>
<b><i>Where to?</i></b>
- [[To Square|Square]]
- [[Mayor's Pass|CBridgeA]]


:: T2 [Outside] {"position":"1400,700","size":"200,100"}
<html><img src="https://inklings.live/Twines/icons/abstract-062.svg" alt="<<_item1.name>> icon" style="width: 50px; height: 50px; margin-bottom: 10px;" /><big><b>Crowl</big></b></html>
<b><u><<=passage()>></u></b>
<b><i>You travel along the pathway looking around...</i></b>

<b><i>Where to?</i></b>
- [[Tavern|JimsTavern]]
- [[Bazaar]] 
- [[Tents out back...|Witches]]
<sub>South of Crowl</sub>
- [[Center Road|T3]]


:: T3 [Outside] {"position":"800,1300","size":"200,100"}
<html><img src="https://inklings.live/Twines/icons/abstract-062.svg" alt="<<_item1.name>> icon" style="width: 50px; height: 50px; margin-bottom: 10px;" /><big><b>Crowl</big></b></html>
<b><u><<=passage()>></u></b>
The central road of Crowl. Many merchants pass through here, never know who you might bump into.

<b><i>Where to?</i></b>
<sub><u>North Crowl</u></sub>
-[[South Road|T2]]
<sub><u>South Crowl</u></sub>
-<<link "Toward the Docks">>
    <<goto "Dock.1">>
<</link>>
-<<link "Vist the Jewelers">>
    <<goto "Jewelers">>
<</link>>
-<<link "Check the Post">>
    <<goto "Post">>
<</link>>
-<<link "Toward Merchant Guild">>
    <<goto "DockQrts">>
<</link>>


:: T4 [Outside] {"position":"200,800","size":"100,200"}
<html><img src="https://inklings.live/Twines/icons/abstract-062.svg" alt="<<_item1.name>> icon" style="width: 50px; height: 50px; margin-bottom: 10px;" /><big><b>Crowl</big></b></html>
<b><u><<=passage()>></u></b>
<<if $spotcard>>
    You have earned access to the privileged few.
    [[Moon Bridge|MoonBr]]
<<else>>
    You clearly are confused on where you intend to go.
<</if>>


<b><i>Where to?</i></b>
- [[North Dock|Dock.1]]
- [[Mayor's Pass|CBridgeA]]


:: TabSample {"position":"3800,900","size":"100,100"}
<<tabs>>
    <<tab "ATM">>
\:: Bank Actions
Enter the amount to deposit or withdraw:

<input type="number" id="transactionAmount" placeholder="Enter amount">
<!-- Deposit Button -->
<<button "Deposit">>
    <<bankTransaction "deposit" "Merchant Guild">>
<</button>>
<!-- Withdraw Button -->
<<button "Withdraw">>
    <<bankTransaction "withdraw" "Merchant Guild">>
<</button>>
<!-- Display Transaction Result Here -->
<div id="transactionResult">Make a transaction to see the result here.</div>

[[View Statements|Transactions]]
<b><i>Back</i></b>
- <<link "Main Hall">>
    <<goto "MerchantGuild">>
<</link>>    <</tab>>
    <<tab "Items">>
\:: Bank Actions
Enter the amount to deposit or withdraw:

<input type="number" id="transactionAmount" placeholder="Enter amount">
<!-- Deposit Button -->
<<button "Deposit">>
    <<bankTransaction "deposit" "Merchant Guild">>
<</button>>
<!-- Withdraw Button -->
<<button "Withdraw">>
    <<bankTransaction "withdraw" "Merchant Guild">>
<</button>>
<!-- Display Transaction Result Here -->
<div id="transactionResult">Make a transaction to see the result here.</div>

[[View Statements|Transactions]]    <</tab>>
    <<tab "Keys">>
\:: Bank Actions
Enter the amount to deposit or withdraw:

<input type="number" id="transactionAmount" placeholder="Enter amount">
<!-- Deposit Button -->
<<button "Deposit">>
    <<bankTransaction "deposit" "Merchant Guild">>
<</button>>
<!-- Withdraw Button -->
<<button "Withdraw">>
    <<bankTransaction "withdraw" "Merchant Guild">>
<</button>>
<!-- Display Transaction Result Here -->
<div id="transactionResult">Make a transaction to see the result here.</div>

[[View Statements|Transactions]]    <</tab>>
<</tabs>>


:: Trade Hall {"position":"200,2200","size":"100,100"}
<b><i>Within the massive hall you see materials of all kinds, some core and staples others luxurious with clear signs you won't be touching them anytime soon...</i></b>
<<inv $player filter>>


- <<link "Main Hall">>
    <<goto "MerchantGuild">>
<</link>>


:: Transactions {"position":"300,2325","size":"100,100"}
**Transaction History:**
<<for _entry range $ledger>>
  <<print _entry.type>> of <<print _entry.amount>> coins at passage <<print _entry.passage>> in location <<print _entry.location>><br>
<</for>>

<b><i>Back</i></b>
- <<link "Main Hall">>
    <<goto "MerchantGuild">>
<</link>>
- <<link "Money Services">>
    <<goto "M&M Services">>
<</link>>


:: View Cart {"position":"1325,0","size":"100,100"}
\:: Cart Passage
<<script>>
    // Increase the number of cart visits
    State.variables.cartVisits += 1;

    // Calculate price increase: 10% base + focus penalty
    let baseIncrease = Math.ceil(State.variables.cartBasePrice * 0.10);
    let focusPenalty = Math.ceil((100 - State.variables.focus) / 10);

    // Apply the total price increase
    State.variables.cartPrice += baseIncrease + focusPenalty;

    // Refill 25 focus, but cap it at 100
    State.variables.focus = Math.min(100, State.variables.focus + 25);

    // Activate immunity for 10 passages
    State.variables.rewardActive = true;
    State.variables.rewardPassagesLeft = 10;

    console.log(`Cart visit #${State.variables.cartVisits}`);
    console.log(`New Cart Price: ${State.variables.cartPrice}`);
    console.log(`Focus: ${State.variables.focus}`);
<</script>>

<p><em>There is something unsettling about this cart. A pull—subtle, yet gnawing. It fills you with longing, and in that longing, a fragile clarity. But every visit adds another tether, and the cart's price swells with it.</em></p>

<p>The cart’s current price: <strong>$<<= $cartPrice>> coins</strong></p>
<p>Your current focus: <strong><<=$focus>>%</strong></p>

<<if $funds >= $cartPrice>>
    [[Buy the cart and end your journey|End Game]]
<<else>>
    <p>You do not have enough funds to buy the cart.</p>
<</if>>

The long back to the Crowl's North Gate leaves a debt you'll need to recover, how did you get back here?...

[[Back to Crowl.|North Gate T.]]


:: Wake {"position":"825,0","size":"100,100"}
[[To the road ahead.|EndIntro]]


:: Well [Outside] {"position":"1800,600","size":"100,100"}
<html><img src="https://inklings.live/Twines/icons/abstract-062.svg" alt="<<_item1.name>> icon" style="width: 50px; height: 50px; margin-bottom: 10px;" /><big><b>Crowl</big></b></html>
<b><u><<=passage()>></u></b>
You see two pulleys hanging over the well, each holding something mysterious. Come back later and maybe something will occur.

<b><i>Where to?</i></b>
- [[Back to Square|Square]]
- [[North Merchants|Loc1]] 
- [[South Merchants|Loc2]]


:: Wheatfield {"position":"2650,450","size":"100,100"}
<b><i>Do you..</i></b>
- [[Back to Barn.|CityFarm]]
- [[Look around north.|Stalls]]
- [[Inquire the huddle.|Caretakers]]

<sub><u>Back to Crowl</u></sub>
- [[Slums]] 
- [[Lower Slums]]


:: Wishbone {"position":"425,0","size":"100,100"}
<<fadein 5s 1s>>\
        "You arrived at the Wishbone like anyone else—empty pockets and a head full of schemes. The journey was supposed to be simple: pass through the basin, maybe haggle with a few merchants, then on to Crowl. But something about this place held you, wrapped you in its strange comfort. Strangers offered drinks, stories were shared in passing, and, somewhere in between the crackling fire and a soft lull of song, you let your guard down."\
<</fadein>>

[[You shouldn't have.|Dream]]


:: Witches [Outside] {"position":"1100,700","size":"100,100"}
<html><img src="https://inklings.live/Twines/icons/abstract-062.svg" alt="<<_item1.name>> icon" style="width: 50px; height: 50px; margin-bottom: 10px;" /><big><b>Crowl</big></b></html>
<b><u><<=passage()>></u></b>
<b><i>Where to?</i></b>
- [[Bazaar]] 
- [[Southern Pass|T2]]


:: Wood {"position":"2700,1300","size":"100,100"}
<html><img src="https://inklings.live/Twines/icons/hand%20%(2).svg" alt="<<Hand>> icon" style="width: 50px; height: 50px; margin-bottom: 10px;" /></html><<if $equipment.has("axe")>><html><img src="https://inklings.live/Twines/icons/battered-axe.svg" alt="<<Axe>> icon" style="width: 50px; height: 50px; margin-bottom: 10px;" /><big><b>Wilds</big></b></html><</if>>
<b><u><<=passage()>></u></b>
Wood: @@#mats;<<= $materials.count("wood")>>@@

You go to gather some wood.

<<button "Gather by hand">>
    <<pickup $materials "wood" 1>>
    <<replace "#mats">><<= $materials.count("wood")>><</replace>>
<</button>>\
<<if $equipment.has("axe")>><<button "Use the axe">>
    <<pickup $materials "wood" 2>>
    <<replace "#mats">><<= $materials.count("wood")>><</replace>>
<</button>><</if>>


[[Back to Workshop|Workshop]]


:: Workshop {"position":"2500,800","size":"100,100"}
<html><img src="https://inklings.live/Twines/icons/house.svg" alt="<<_item1.name>> icon" style="width: 50px; height: 50px; margin-bottom: 10px;" /><big><b>Crowl</big></b></html>
<b><u><<=passage()>></u></b>
Entering the shop you hear a odd jingle: <i>"Ah yea someones present."</i>, accompanied by a handful of clanks and hammering further within.

There seem to be a flyer on a nearby desk:
<<message 'Flyer' 'uniqueID' 'btn'>><sub>Free Crafting Table rentals!</sub><<message 'Clause' 'anotherUniqueID'>><sub><i>Bring your own materials and have at em, any and all creations that go beyond the beginners handbook share the legal recreation of any onlookers without royality requirements.</i></sub><</message>><</message>>

<b><i>Where to?</i></b>
- [[Go to the crafting table|Crafting]]
- [[Back to Shops|Loc2]]

<sub><u>Go to resource locations:</u></sub>
<sub><sub>This will cost the same respect focus used to travel normally.</sub></sub>
- [[To Quarry|Stone]]
- [[To Forest|Wood]]
- [[To Mine|Iron]]


:: widgets [widget nobr] {"position":"0,300","size":"100,100"}
<<widget "funds">>
    <<set $funds = Math.max($funds + _args[0], 0)>>
    <<replace "#funds">><<= $funds>><</replace>>
<</widget>>
<<widget "buylink">>
    <<set _item to _args[0]>>
    <<set _amount to _args[1]>>
    <<set _price to _args[2]>>
    <p @data-item="_item" class="buy-listing">
        <span><<= _item>></span> 
        <span class="count"><<= _amount>></span> 
        <span class="price">Price: <span><<= _price || 1>></span></span> <!-- Fallback price in case of undefined -->
        <span class="buy-link">
            <<capture _item, _amount, _price>>
                <<link "Buy">>
                    <<if $funds < _price>>
                        <<run UI.alert("You don't have enough funds!")>>
                    <<else>>
                        <<set $funds -= _price>> <!-- Deducts price from $funds -->
                        <<replace "#funds">><<= $funds>><</replace>> <!-- Update funds display -->
                        <<set $player[_item] = ($player[_item] || 0) + 1>> <!-- Add item to player inventory -->
                        <<set _amount -= 1>> <!-- Reduce available shop quantity -->
                        <<if _amount > 0>>
                            <<replace `"p.buy-listing[data-item=\"" + _item + "\"] > .count"`>><<= _amount>><</replace>>
                        <<else>>
                            <<remove `"p.buy-listing[data-item=\"" + _item + "\"]"`>>
                        <</if>>
                    <</if>>
                <</link>>
            <</capture>>
        </span>
    </p>
<</widget>>

<<widget "selllink">>
    <<set _item to _args[0]>>
    <<set _amount to _args[1]>>
    <<set _basePrice to _args[2]>>
    
    <!-- Calculate the sell price based on license and focus -->
    <<set _rate = $hasPrestigeLicense ? _sellRates.prestigeLic :
                 $hasMiddlemanLicense ? _sellRates.middleLic :
                 $hasEntryLicense ? _sellRates.entryLic : 0>>
    <<set _sellPrice = _basePrice * _rate * _focusAdjustment>>

    <p @data-item="_item" class="sell-listing">
        <span><<= _item>></span> 
        <span class="count"><<= _amount>></span> 
        <span class="sell-link">
            <<capture _item, _amount, _sellPrice>>
                <<link "Sell">>
                    <<funds _sellPrice>> <!-- Add adjusted funds for the sold item -->
                    <<set $player[_item] -= 1>> <!-- Remove item from player inventory -->
                    <<set $shop[_item] = ($shop[_item] || 0) + 1>> <!-- Add item back to shop inventory -->
                    <<set _amount -= 1>> <!-- Reduce displayed player quantity -->
                    <<if _amount > 0>>
                        <<replace `"p.sell-listing[data-item=\"" + _item + "\"] > .count"`>><<= _amount>><</replace>>
                    <<else>>
                        <<remove `"p.sell-listing[data-item=\"" + _item + "\"]"`>>
                    <</if>>
                <</link>>
            <</capture>>
        </span>
    </p>
<</widget>>


:: StoryScript [script]
State.prng.init();

window.MQBN = class MQBN {

  static getStorylets(limit,store="storylets",needAvailable=true) {
    const available = [];
    let   priority  = 0;
    let   count     = 0;
    for (let s of setup[store].sort(MQBN.prioritySort)) {
      if (this.meetsRequirements(s,store)) {
        count ++;
        if ((s.priority ?? 0) >= priority) {
          available.push(s);
        }
        if (count == limit) { 
          priority = s.priority ?? 0; 
          if (!needAvailable) { break; }
        } 
      }
    };
    temporary()[store+'_available'] = available;
    return available.slice(0,limit).sort(MQBN.weightSort);
  }

  static prioritySort(a, b) {
    if (a.priority && !b.priority) {
      return -1;
    } else if (a.priority != b.priority) {
      return a.priority > b.priority ? -1 : 1;
    } else {
      return randomFloat(0,1) - 0.5;
    }
  }

  static weightSort(a, b) {
    if (a.priority && !b.priority) {
      return 1;
    } else if (a.weight != b.weight) {
      return a.weight > b.weight ? 1 : -1;
    } else {
      return 0;
    }
  }
  
  static meetsRequirements(s,store="storylets") {
    if (!s.sticky && variables()[store+"_used"].has(s.id ? s.id : s.title)) { return false; }
    if (s.all) {
      for (const r of s.all) {
        if (!this[r.type+"Requirement"](r,store)) { return false; }
      }
    }
    if (s.any) {
      for (const r of s.any) {
        if (this[r.type+"Requirement"](r,store)) { return true; }
      }
      return false;
    }
    return true;
  }
  
  static anyRequirement(r,store) { return this.meetsRequirements(r,store); }
  static allRequirement(r,store) { return this.meetsRequirements(r,store); }
  
  static visitedRequirement(r) {
    if (r.op == "not") {
      return !visited(r.passage);
    } else {
      return visited(r.passage);
    }
  }
  
  static varRequirement(r) {
    return this.operators[r.op ?? "eq"](State.getVar(r.var),r.value);
  }
  
  static sequenceRequirement(r) {
    if (r.count) {
      return this.operators[r.op ?? "eq"](State.getVar(r.seq).count,r.count);
    } else if (r.value) {
      return this.operators[r.op ?? "eq"](State.getVar(r.seq).value,r.value);
    } else {
      return this.operators[r.op == "not" ? "neq" : "eq"](State.getVar(r.seq).name,r.name);
    }
  }
  
  static playedRequirement(r,store) {
    if (r.op == "not") {
      return !variables()[store+"_used"].has(r.story);
    } else {
      return variables()[store+"_used"].has(r.story);
    }
  }

  static collectionRequirement(r) {
    const _var = State.getVar(r.var);
    let   val;
    if (_var instanceof Set || _var instanceof Map) {
      val = _var.has(r.has);
    } else if (_var instanceof Array) {
      val = _var.includes(r.has);
    } else if (Util.toStringTag(_var) == "Object") {
      val = Object.hasOwn(r.has) && _var[r.has];
    } else {
      throw(`The variable ${r.var} is not any kind of collection`);
    }
    if (r.op == "not") {
      return !val;
    } else {
      return val;
    }
  }

  static functionRequirement(r,store) {
    return r.func(r,store);
  }
  
  static randRequirement(r) {
    let x = this.getRandomInt(1,100);
    return (x <= r.chance);
  }

  static operators = {
    eq:  function(a, b) { return a == b },
    neq: function(a, b) { return a != b },
    lt:  function(a, b) { return a < b  },
    gt:  function(a, b) { return a > b  },
    lte: function(a, b) { return a <= b },
    gte: function(a, b) { return a >= b },
    includes: function(a, b) { return Array.isArray(a) && a.includes(b) },
    notincludes: function(a, b) { return Array.isArray(a) && !a.includes(b) },
    has: function(a, b) { 
      return (a instanceof Set || a instanceof Map) && a.has(b) 
    }
  }

  /* UTILITY */

  static trigger(story) {
    $(document).trigger({ type: ":storyletchosen", storylet: story});
  }

  // helper to avoid a seeded prng
  static getRandomInt(min, max) {
    return Math.random() * (max - min) + min;
  }

  static played(story,store="storylets") {
    return this.playedRequirement({ story : story },store);
  }

  /* SCAN */
  
  static storyletscan(store = "storylets") {
    const st      = (store == "storylets") ? "" : ` ['"]{0,1}*${store}['"]{0,1}`;
    const match   = new RegExp(`<<storylet${st}>>`);
    const replace = new RegExp(`<<storylet${st}>>(.*)<<\/storylet>>`,"s");
    const ps      = Story.lookupWith((p) => p.text.match(match));
    const storylets = [];
    for (let p of ps) {
      const s = p.text.replace(replace,"$1");
      const storylet   = Scripting.evalJavaScript(`(${s.trim()})`);
      storylet.title   = storylet.title ?? p.title;
      storylet.passage = p.title;
      storylets.push(storylet);
    }
    setup[store] = setup[store].concat(storylets);
  }
  
  static storyletsinit(store = "storylets") {
    State.setVar('$'+store+'_used',new Map());
    State.setVar('$'+store+'_current',false);
  }

  static pruneStorylets(store = "storylets") {
    setup[store] = setup[store].filter((s) => !variables()[store+'_used'].has(s.id ?? s.title));
  }

  /* SEQUENCES */

  static createSequence(name, values, mode = "linear") {
    setup.MQBNsequences = setup.MQBNsequences || {};
    let initial = 0;
    if (Util.toStringTag(values) == "Object") {
      let va = [];
      let setinitial = false;
      for (let val in values) {
        if (!setinitial) { initial = val; setinitial = true; }
        va[val] = values[val];
      }
      values = va;
    }
    setup.MQBNsequences[name] = { values: values, mode: mode };
    const seq = new Sequence(name,values[initial],initial);
    State.setVar(name,seq);
  }

  static sequenceChange(name, inc) {
    const seq   = State.getVar(name);
    const idx   = seq.value;
    const len   = setup.MQBNsequences[name].values.length;
    let   newidx;

    if (setup.MQBNsequences[name].mode == "linear") {
      newidx = Math.max(Math.min(idx + inc,len -1),0);
    } else if (setup.MQBNsequences[name].mode == "cycling") {
      newidx = idx + inc;
      if (inc > 0 && newidx > len -1) {
        seq.count += Math.floor(newidx / len);
      } else if (inc < 0 && newidx < 0) {
        seq.count -= Math.abs(Math.floor(newidx / len));
      }
      newidx = Math.abs(newidx % len);
    }
    seq.name  = this.sequenceName(name,newidx);
    seq.val   = newidx;
    State.setVar(name,seq);
  }

  static sequenceName(name,value) {
    let previous = "";
    for (let val in setup.MQBNsequences[name].values) {
      if (val > value) {
        return previous;
      }
      previous = setup.MQBNsequences[name].values[val];
    }
    return previous;
  }
  
};

window.Sequence = class Sequence {
  constructor(type, name, value, count = 1) {
    this.type  = type;
    this.name  = name;
    this.val   = value;
    this.count = count;
  }

  toString() {
    return this.name;
  }

  [Symbol.toPrimitive](hint) {
    if (hint == "string") {
    	return this.name;
    } else {
    	return this.value;
    }
  }
  
  set value(newval) {
    MQBN.sequenceChange(this.type, newval - this.value);
  }
  get value() { return this.val }
  
  toJSON() { // the custom revive wrapper for SugarCube's state tracking
      // use `setup` version in case the global version is unavailable
      return JSON.reviveWrapper(String.format("new Sequence({0},{1},{2},{3})",
        JSON.stringify(this.type),
        JSON.stringify(this.name),
        JSON.stringify(this.val),
        JSON.stringify(this.count)
      ));
  }
  
  clone() { return new Sequence(this.type,this.name,this.val,this.count); }
};

window.macroPairedArgsParser = function(args,start=0) {
  const parsed = {};
  for (let i = start; i < args.length; i += 2) {
    parsed[args[i].replace(/[^a-zA-Z0-9_]/g,'')] = args[i+1];
  }
  return parsed;
}

Macro.add(["storyletsinit","initstorylets"],{
  handler: function() {
      MQBN.storyletsinit(this.args[0]);
  }
});

Macro.add(["storyletsprune","prunestorylets"],{
  handler: function() {
      MQBN.pruneStorylets(this.args[0]);
  }
});

Macro.add("storyletgoto",{
  handler: function() {
    if (this.args.length === 0) {
        return this.error(`no storylet specified`);
    }

    const args    = macroPairedArgsParser(this.args,1);
    const store   = args.store ?? 'storylets';
    const ifopen  = args.open  ?? false;
    let   storylet;

    if (typeof this.args[0] === 'object') {
      // Argument was a storylet object
      storylet = this.args[0]; 
    } else {
      // Argument was a storylet name
      const storylets = setup[store].find((s) => { return s.title == this.args[0] || s.id == this.args[0]});
      if (ifopen) {
        // we wish to use the first open one
        const filtered = storylets.toSorted(MQBN.prioritySort).filter((s) => MQBN.meetsRequirements(s));
        storylet = filtered.length ? filtered[0] : storylets[0];
      } else {
        storylet = storylets[0];
      }
    }

    if (storylet) {
      const passage = storylet.passage ?? storylet.title;
      variables()[store+'_used'].set(storylet.id ?? storylet_title);
      variables()[store+'_current'] = storylet;
      MQBN.trigger(storylet);
      Engine.play(passage);
    }
  }
});

Macro.add("storyletlink",{
  tags    : null,
  handler() {
    if (this.args.length === 0) {
      return this.error("no storylet specified");
    }

    const args    = macroPairedArgsParser(this.args,1);
    const store   = args.store ?? 'storylets';
    const style   = args.behaviour ?? 'hidden'; 
    const payload = this.payload[0].contents.trim();
    const $link   = jQuery(document.createElement('a'));
      
    let storylet;
    if (typeof this.args[0] === 'object') {
      // Argument was a storylet object
      storylet = this.args[0]; 
    }
    else {
      // Argument was a storylet name
      if (!temporary()[store+'_available']) {
          MQBN.getStorylets(0,store);
      }
      const s = temporary()[store+'_available'].find((s) => { return s.title == this.args[0] || s.id == this.args[0] });
      if (s) {
        storylet = s;
      }
    }
    
    if (storylet) {
          
      $link.append(document.createTextNode(args.text ?? (storylet.link ?? storylet.title)));
      
      let passage = storylet.passage ?? storylet.title;
      
      if (passage != null) { // lazy equality for null
        $link.attr('data-passage', passage);
        if (Story.has(passage)) {
          if (Config.addVisitedLinkClass && State.hasPlayed(passage)) {
            $link.addClass('link-visited');
          }
        }
        else {
          $link.addClass('link-broken');
        }
      }

      $link
        .addClass('macro-storylet-link')
        .addClass('link-internal')
        .ariaClick({
          namespace : '.macros',
          role      : passage != null ? 'link' : 'button', // lazy equality for null
          one       : passage != null // lazy equality for null
        }, this.createShadowWrapper(
            function() {
                variables()[store+'_used'].set(storylet.id ?? storylet.title);
                variables()[store+'_current'] = storylet;
                if (payload) {
                  Wikifier.wikifyEval(payload)
                }
              },
          passage != null // lazy equality for null
            ? () => { MQBN.trigger(storylet); Engine.play(passage); }
            : null
        ))
        .appendTo(this.output);
          
    } else if (style == "disabled" && typeof this.args[0] === "string") {
      storylet = setup[store].find((s) => s.id == this.args[0] || s.title == this.args[0]);
      if (storylet) {
        jQuery(this.output).wiki(`<span class="link-disabled">${args.disabledtext ?? (storylet.link ?? storylet.title)}</span>`);
      } else {
        return this.error(`storylet ${this.args[0]} cannot be found`);
      }
    }
  }
});

Macro.add("storyletuse",{
  handler: function() {
    if (this.args.length === 0) {
        return this.error(`no storylet specified`);
    }

    const args    = macroPairedArgsParser(this.args,1);
    const store   = args.store ?? 'storylets';
    let   storylet;

    if (typeof this.args[0] === 'object') {
      // Argument was a storylet object
      storylet = this.args[0]; 
    } else {
      // Argument was a storylet name
      const storylets = setup[store].find((s) => { return s.title == this.args[0] || s.id == this.args[0]});
    }

    if (storylet) {
      variables()[store+'_used'].set(storylet.id ?? storylet_title);
      variables()[store+'_current'] = storylet;
    }
  }
});

/* SCAN MACROS */

Macro.add("storyletscan",{
  handler: function() {
    MQBN.storyletscan(this.args[0]);
  }
});

Macro.add("storylet",{
  handler: function() {
    // null placeholder to allow the <<storylet>> syntax
  }
});

/* SEQUENCE MACROS */

Macro.add("sequence",{
  handler: function() {
    if (this.args.length === 0) {
      return this.error("no sequence name specified");
    }
    if (this.args[1] != "linear" && this.args[1] != "cycling") {
      return this.error(`argument 2 must be either linear or cycling, ${this.args[1]} found`);
    }
    if (this.args.length < 3) {
      return this.error("no sequence values specified");
    }
    if (Array.isArray(this.args[1]) || Util.toStringTag(this.args[1]) == "Object") {
      MQBN.createSequence(this.args[0],this.args[2],this.args[1]);
    } else {
      MQBN.createSequence(this.args[0],this.args.slice(2),this.args[1]);
    }
  }
});

Macro.add(["sequenceadvance","sequencerewind"],{
  handler: function() {
    if (this.args.length === 0) {
      return this.error("no sequence name specified");
    }
    if (!setup.MQBNsequences) {
      return this.error("you must create a sequence using <<sequence>> before ${this.name == 'sequenceadvance' ? 'advancing' : 'rewinding'} it");
    }
    if (!setup.MQBNsequences[this.args[0]]) {
      return this.error(`sequence ${this.args[0]} has not been defined`);
    }
    let   inc   = this.args[1] ?? 1;
    if (this.name == "sequencerewind") { inc = -1 * inc; }
    MQBN.sequenceChange(this.args[0],inc);
  }
});

///////////////////////


$(document).one(':passagedisplay', function () {
    console.log("Passage fully displayed. JavaScript ready.");
    // Place all your initialization code here.
});

// Blackout Sys //
// Hijack passage transitions by intercepting all link clicks
$(document).on('click', 'a.link-internal', function (event) {
    // If focus is 0 or below, trigger blackout immediately
    if (State.variables.focus <= 0 && !State.variables.blackoutTriggered) {
        event.preventDefault();  // Stop the normal link behavior
        State.variables.blackoutTriggered = true;  // Prevent multiple triggers
        Engine.play('BlackoutPassage');  // Redirect to blackout
    }
});


window.updateFocusSidebar = async function () {
    // Check if the sidebar exists and clear it to force a refresh
    if ($('#sidebar').length) {
        $('#sidebar').empty();  // Clear the existing content

        // Optional: Add placeholder content to ensure something renders
        $('#sidebar').html(`
            <div class="sidebar-placeholder">
                <p>Sidebar refreshed!</p>
            </div>
        `);
    }

    console.log("Sidebar refreshed without tracking.");
};




// Track the number of passages and update rent logic
window.updatePassageCount = function () {
    SugarCube.State.variables.Totalpassages += 1;
    console.log(`Total passages: ${SugarCube.State.variables.Totalpassages}`);
};

// Check if rent is due and apply it to funds
window.checkRentDue = function () {
    const state = SugarCube.State.variables;
    
    if (state.Totalpassages % state.rentnxt === 0) {
        state.rentdue = state.rent;  // Calculate rent due
        if (state.funds >= state.rentdue) {
            state.funds -= state.rentdue;
            console.log(`Rent of ${state.rentdue} coins paid.`);
        } else {
            console.log("Not enough funds to pay rent!");
            // Handle scenarios like penalties or warnings here if needed
        }
    }
    console.log(`Funds remaining: ${state.funds}`);
};






// 4. Deplete focus on passage display with immunity handling
$(document).on(':passagerender', function () {
    console.log("Passage rendered. Checking focus depletion...");

    window.depleteFocus();  // Deplete focus on passage change
    window.updateFocusSidebar();  // Update sidebar with new focus values
});

window.depleteFocus = function () {
    if (State.variables.rewardActive) {
        console.log("Immunity active: Focus not depleted.");
        return;
    }

    const prestige = State.variables.prestige || 0;
    const baseDrain = 1;
    const drainAmount = Math.max(0, baseDrain - (prestige * 0.5));

    State.variables.focus = Math.max(0, State.variables.focus - drainAmount);
    console.log(`Focus drained by ${drainAmount}%. Current focus: ${State.variables.focus}%`);
};





//// Track Passage Immunity
// Track passage changes and manage immunity effect
$(document).on(':passagerender', function () {
    if (State.variables.rewardActive) {
        // Decrement the remaining passage count
        State.variables.rewardPassagesLeft -= 1;

        console.log(`Immunity active: ${State.variables.rewardPassagesLeft} passages left.`);

        // If the reward expires, disable it
        if (State.variables.rewardPassagesLeft <= 0) {
            State.variables.rewardActive = false;
            console.log("Immunity expired.");
        }
    }
});



//////////////
/// Core Menu //////////
// Function to inject the logo, slogan, location notifier, and mini-map into the sidebar
window.injectLogoAndLocation = function () {
    if (!$('#sidebar-header').length) {
        $('#ui-bar').prepend(`
            <div id="sidebar-header" style="
                text-align: center;
                               padding: 35px 10px 10px 10px;  /* Add 80px padding to the top */
                border-bottom: 1px solid #ccc;
                margin-bottom: 10px;">
                <img src="https://inklings.live/Twines/MMP/a.2.yoyo.nobeef.webp" 
                     alt="Game Logo" 
                     style="max-width: 250px; display: block; margin: 0 auto;">
                <p style="font-style: italic; margin-top: 5px;">
                    "Your journey begins here..."
                </p>
                <div id="location-notifier" style="
                    font-weight: bold;
                    margin-top: 10px;
                    font-size: 1.2em;
                ">
                    Location: <span id="current-location">Unknown</span>
                </div>
                <div id="mini-map" style="
                    margin-top: 10px;
                    width: 250px;
                    height: 150px;
                    background-size: cover;
                    background-position: center;
                    border: 1px solid #ddd;
                ">
                    <!-- Mini-map image will be displayed here -->
                </div>
            </div>
        `);

        console.log("Logo, slogan, location notifier, and mini-map injected.");
    }
};

// Function to update the location notifier and mini-map with the current passage title
// Function to update the location notifier and mini-map with the current passage title
window.updateLocationNotifier = function () {
    const currentLocation = SugarCube.State.passage || "Unknown Location";
    $('#current-location').text(currentLocation);

    // Update the mini-map with the appropriate image
    const mapImage = getMiniMapImage(currentLocation);
    $('#mini-map').css('background-image', `url(${mapImage})`);

    console.log(`Location updated to: ${currentLocation}`);
};

// Function to return the appropriate mini-map image URL based on the location name
function getMiniMapImage(location) {
    const baseUrl = "https://inklings.live/Twines/MMP/mapgui/";

    const mapImages = {
        "Bandit Dock": "BanditDock.webp",
        "Bandits": "Bandits.webp",
        "Barracks": "Barracks.webp",
        "Bazaar": "Bazaar.webp",
        "CBridgeA": "CBridgeA.webp",
        "Dock.1": "Dock.1.webp",
        "Dock.2": "Dock.2.webp",
        "DockQrts": "DockQrts.webp",
        "Homes": "Homes.webp",
        "Jewelers": "Jewlers.webp",
        "JimsTavern": "JimsTavern.webp",
        "Loc1": "Loc1.webp",
        "Loc2": "Loc2.webp",
        "LowerSlums": "LowerSlums.webp",
        "MayorOffice": "MayorOffice.webp",
        "MerchantGuild": "MerchantGuild.webp",
        "MoonBr": "MoonBr.webp",
        "MoonDock": "MoonDock.webp",
        "MoonIsle": "MoonIsle.webp",
        "North Gate": "NorthGate.webp",
        "Post": "Post.webp",
        "Slums": "Slums.webp",
        "SouthGate": "SouthGate.webp",
        "Square": "Square.webp",
        "T1": "T1.webp",
        "T2": "T2.webp",
        "T3": "T3.webp",
        "T4": "T4.webp",
        "Well": "Well.webp",
        "Witches": "Witches.webp",
      	"CityFarm": "CityFarm.webp",
      	"Lower Slums": "LowerSlums.webp"
    };

    // Return the corresponding image URL or the default image URL
    return `${baseUrl}${mapImages[location] || 'default.webp'}`;
}

// Inject the logo, location notifier, and mini-map on story load
$(document).on(':storyready', function () {
    console.log("SugarCube engine ready.");
    window.injectLogoAndLocation();  // Inject logo, slogan, location notifier, and mini-map
    window.updateLocationNotifier();  // Set the initial location and map
});

// Update the location notifier and mini-map every time a passage is rendered
$(document).on(':passagerender', function () {
    console.log("Passage rendered. Updating location...");
    window.updateLocationNotifier();  // Update the location and mini-map
});


// Inject the logo, location notifier, and mini-map on story load
$(document).on(':storyready', function () {
    console.log("SugarCube engine ready.");
    window.injectLogoAndLocation();  // Inject logo, slogan, location notifier, and mini-map
    window.updateLocationNotifier();  // Set the initial location and map
});

// Update the location notifier and mini-map every time a passage is rendered
$(document).on(':passagerender', function () {
    console.log("Passage rendered. Updating location...");
    window.updateLocationNotifier();  // Update the location and mini-map
});

/// TYPEWRITER //
window.typewriter = function (element, text, speed = 1, batchSize = 5) {
    let i = 0;
    function type() {
        if (i < text.length) {
            element.innerHTML += text.slice(i, i + batchSize);  // Add characters in batches
            i += batchSize;
            setTimeout(type, speed);
        }
    }
    type();
};

importScripts(
	"./javascript/macro.js",
);


// Dyslexia
Macro.add('dyslexia', {
	tags: null,
	handler  : function () {
		// Dyslexia by SjoerdHekking
		'use strict';

		let out = $(`<span class="macro-mess-up-words" />`)
        	.wiki(this.payload[0].contents)
          	.appendTo(this.output);

		// returns texts
		let getTextNodesIn = function(el) {
		    return $(el).find(":not(iframe,script)").addBack().contents().filter(function() {
		        return this.nodeType === 3;
		    });
		};

		// only allow scanning within these tags
		let textNodes = getTextNodesIn(out);

		let errorArray = [];

		let storeArg = this.args[0] || 10;
		let storeArg2 = this.args[1] || 3;
		let storeArg3 = this.args[2] || 50;

		if (storeArg) {
			storeArg = parseInt(storeArg);
			if (isNaN(storeArg) || storeArg < 0 || storeArg > 100) {
				errorArray.push("Check first argument. Invalid value.");
			}
		} 
		if (storeArg2) {
			storeArg2 = parseInt(storeArg2);
			if (isNaN(storeArg2) || storeArg2 < 2) {
				errorArray.push("Check second argument. Invalid value.");
			}
		} 
		if (storeArg3) {
			storeArg3 = parseInt(storeArg3);
			if (isNaN(storeArg3) || storeArg3 < 50) {
				errorArray.push("Check third argument. Invalid value.");
			}
		} 

		if (errorArray.length > 0) {
			let joinedArray = errorArray.join('\n')
			return this.error(joinedArray);
		}

		let wordsInTextNodes = [];
		for (let i = 0; i < textNodes.length; i++) {
			const node = textNodes[i];
			const wordsInNode = node.nodeValue.match(/\w+/g) || [];
		
			wordsInTextNodes[i] = wordsInNode.map((word, index) => ({
				length: word.length,
				position: node.nodeValue.indexOf(word, index === 0 ? 0 : wordsInNode[index - 1].length + wordsInNode[index - 1].index)
			}));
		}

		/**
		 * Messes up the words in text nodes according to the probability and word length delay set in the dyslexia macro.
		 */
		function messUpWords () {
			for (let i = 0; i < textNodes.length; i++) {
				let node = textNodes[i];

				for (let j = 0; j < wordsInTextNodes[i].length; j++) {
					
					if (Math.random() < (100 - storeArg) / 100 ) {
						continue;
					}

					let wordMeta = wordsInTextNodes[i][j];
					let word = node.nodeValue.slice(wordMeta.position, wordMeta.position + wordMeta.length);
					node.nodeValue = node.nodeValue.slice(0, wordMeta.position) + messUpWord(word) + node.nodeValue.slice(wordMeta.position + wordMeta.length);
				};
			};
		}

		/**
		 * Messes up a single word by swapping random letters in the "messy part" of the word (i.e. all letters except the first and last).
		 * @param {string} word - The word to mess up.
		 * @returns {string} The messed up word, or the original word if its length is less than the minimum word length specified in the dyslexia macro.
		 */
		function messUpWord (word) {
			if (word.length < storeArg2) return word;
			const middle = messUpMessyPart(word.slice(1, -1));
  			return `${word[0]}${middle}${word.slice(-1)}`;
		}

		/**
		 * Messes up the "messy part" of a word by swapping two random letters.
		 * @param {string} messyPart - The "messy part" of a word to mess up.
		 * @returns {string} The messed up "messy part", or the original "messy part" if its length is less than 2.
		 */
		function messUpMessyPart (messyPart) {
			if (messyPart.length < 2) return messyPart;

			let a, b;
			while (!(a < b)) {
				a = getRandomInt(0, messyPart.length - 1);
				b = getRandomInt(0, messyPart.length - 1);
			}

			function getRandomInt(min, max) {
				return Math.floor(Math.random() * (max - min + 1) + min);
			}

			return `${messyPart.slice(0, a)}${messyPart[b]}${messyPart.slice(a+1, b)}${messyPart[a]}${messyPart.slice(b+1)}`;
		}

		setInterval(messUpWords, storeArg3);
	}
});



// Spoiler
Macro.add("spoiler", {
	tags: null,
	handler: function () {
		// Spoiler macro by SjoerdHekking
        // with the help of Cyrus Firheir
		"use strict";

		let errorArray = [];
		const storeArg = Math.min(10, Math.max(0, parseInt(this.args[0] ?? 4)));
		const storeArg2 = Math.min(10, Math.max(0, parseInt(this.args[1] ?? 2)));
		const storeArg3 = String(this.args[2] ?? "Click to reveal completely");
		
		if (isNaN(storeArg)) {
			errorArray.push("Check first argument. The spoiler macro used the default");
		}
		
		if (isNaN(storeArg2)) {
			errorArray.push("Check second argument. The spoiler macro used the default");
		}

		if (errorArray.length > 0) {
		  let joinedArray = errorArray.join("\n")
		  return this.error(joinedArray);
		}

		let out = $(`<span class="macro-spoiler" />`)
			.wiki(this.payload[0].contents)
			.appendTo(this.output);

		spoiler(out, {
			max: storeArg,
			partial: storeArg2,
			hintText: storeArg3
		});

		function spoiler(selector, options) {
			const elements = $(selector);
		
			elements.each(function(index, el) {
				el.dataset.spoilerState = "shrouded";
				el.style.transition = "filter 250ms";
		
				function applyBlur(radius) {
					el.style.filter = `blur(${radius}px)`;
				}
		
				applyBlur(options.max);
		
				el.addEventListener("mouseover", function () {
					el.style.cursor = "pointer";
					el.title = options.hintText;
					if (el.dataset.spoilerState === "shrouded") applyBlur(options.partial);
				});
		
				el.addEventListener("mouseout", function () {
					el.title = options.hintText;
					if (el.dataset.spoilerState === "shrouded") applyBlur(options.max);
				});
		
				el.addEventListener("click", function () {
					if (el.dataset.spoilerState === "shrouded") {
						el.dataset.spoilerState = "revealed";
						el.title = "";
						el.style.cursor = "auto";
						applyBlur(0);
					} else {
						el.dataset.spoilerState = "shrouded";
						el.title = options.hintText;
						el.style.cursor = "pointer";
						applyBlur(options.max);
					}
				});
			});
		}
	}
});

////

///** Banking / ATM  by: AZEREP**///
//
Macro.add("bankTransaction",{handler:function(){let a=this.args[0],e=parseInt(document.getElementById("transactionAmount").value),n=this.args[1]||"Unknown Location";if(isNaN(e)||e<=0){this.output.append("<p>Please enter a valid amount.</p>");return}let t="";"deposit"===a?State.variables.funds>=e?(State.variables.funds-=e,State.variables.bankBalance+=e,State.variables.ledger.push({type:"Deposit",amount:e,passage:Story.get("passage").title,location:n}),t=`Deposited ${e} coins. New bank balance: ${State.variables.bankBalance} coins. Funds remaining: ${State.variables.funds} coins.`):t="You don’t have enough funds to deposit this amount.":"withdraw"===a?State.variables.bankBalance>=e?(State.variables.bankBalance-=e,State.variables.funds+=e,State.variables.ledger.push({type:"Withdraw",amount:e,passage:Story.get("passage").title,location:n}),t=`Withdrew ${e} coins. New funds total: ${State.variables.funds} coins. Bank balance remaining: ${State.variables.bankBalance} coins.`):t="You don’t have enough in your bank balance to withdraw this amount.":t="Invalid action specified.",$(document.getElementById("transactionResult")).wiki(`<<replace "#transactionResult">>${t}<</replace>>`)}});


Macro.add('tabs', {
  skipArgs: false,
  tags: null,
  handler : function() {
    const $wrapper  = $("<div class='tabs-tabset'>");
    const $tabs     = $("<div class='tabs-tabs'>");
    const $contents = $("<div class='tabs-contents'>");
    
    let   prefix    = '';
    let   responsive = false;
    let   responseWidth = 0;
    let   responseSide  = 'left';

    for (const arg of this.args) {
      if (["left","right","top","stacked","wrapped","responsive-left","responsive-right","responsive-stacked","responsive-wrapped"].includes(arg)) {
        if (arg.substring(0,10) == "responsive") {
          responsive = true;
          responseSide = arg.substring(11);
        } else {
          $wrapper.addClass(arg);
        }
      } else if (parseInt(arg)) {
        responseWidth = parseInt(arg);
      } else {
        prefix = this.args[0] + '-';
        $wrapper.attr("id",this.args[0]);
      }
    }
    
    this.context = {
      selected: 0,
      tabs: [],
      contents: [],
      tabCount: 0,
      wrapper: $wrapper,
      prefix: prefix
    };
    
    $contents.wiki(this.payload[0].contents);
    
    this.context.tabs[this.context.selected].addClass("selected");
    this.context.contents[this.context.selected].removeClass("hidden");
    $tabs.append(...this.context.tabs);
    $wrapper.attr("style",`--cols:${this.context.tabCount}`).append($tabs, $contents);
    $(this.output).append($wrapper);
    
    if (responsive) {
      const resizeObserver = new ResizeObserver((entries) => {
        window.requestAnimationFrame(() => {
          let entry = entries[0];
          let width = 0;
          if (entry.contentBoxSize) {
              width = entry.contentBoxSize[0].inlineSize;
          } else {
              width = entry.contentRect.width;
          }
          $("#out").html("comparing "+width+" with "+responseWidth+" to set "+responseSide);
          if (width && width <= responseWidth) {
              $wrapper.addClass(responseSide);
          } else {
              $wrapper.removeClass(responseSide);
          }
        });
      });

      resizeObserver.observe($wrapper[0]);
    }
  }
});

Macro.add('tab', {
  skipArgs: false,
  tags: null,
  handler : function() {
    const parent = this.contextSelect(ctx => ctx.name === 'tabs');
    if (!parent) {
        return this.error('must only be used in conjunction with its parent macro <<tabs>>');
    }

    let tabname = this.args[0];
    let tabid   = 'tabs-contents-' + tabname.trim().toLowerCase().replace(/[^a-z0-9]/g,'').replace(/\s+/g, '-');
    let label   = `<span>${tabname}</span>`;
    if (this.args[1] && typeof this.args[1] == "string") {
      label = `<img src="${this.args[1]}">`;
    }
    
    let $contents = $(`<div class="tabs-content hidden" id="${parent.context.prefix}${tabid}">`).wiki(this.payload[0].contents.trim());
    parent.context.contents.push($contents);
    
    let $tab = $(`<button id="${tabid}-control">${label}</button>`).ariaClick(function() {
      parent.context.tabs.forEach((tab) => tab.removeClass("selected"));
      parent.context.contents.forEach((tab) => tab.addClass("hidden"));
      $contents.removeClass("hidden");
      $(this).addClass("selected");
    });
    parent.context.tabs.push($tab);
    if (this.args.length > 1 && this.args[this.args.length -1] === true) { parent.context.selected = parent.context.tabCount; }
    parent.context.tabCount ++;
    
    $(this.output).append($contents);
  }
});

Macro.add(['id','style','class','attr'], {
    skipArgs: false,
    tags: null,
    handler : function() {
        if (this.args[0]) {
            let parsedContent = $("<div>").wiki(this.payload[0].contents.trim()).children();
            if (this.name == "class") {
                parsedContent.first().addClass(this.args[0]);
            } else if (this.name == "attr") {
                if (this.args.length % 2 == 0) {
                    for (let i = 0; i < this.args.length; i += 2) {
                        parsedContent.first().attr(this.args[i],this.args[i+1]);
                    }
                } else {
                    return this.error('You must specify pairs of attribute names and values you wish to add');
                }
            } else {
                parsedContent.first().attr(this.name,this.args[0]);
            }
            jQuery(this.output).append(parsedContent);
        } else {
            return this.error('You must specify the content for the attribute you wish to add');
        }
    }
});

:: StoryStylesheet [stylesheet]
/* Simple Inventory, for SugarCube 2, by Chapel 
v3.0.1, 2024-07-22, 8c9749dbafa5f12948d743a8dedd4e1c74bb9e26 */

ul.simple-inventory-list {
    margin: 0 auto;
    padding: 0;
}

.simple-inventory-listing {
    list-style: none;
    padding: 0.3rem 0.3rem 0.3rem 1rem;
    display: grid;
    grid-template-columns: 1fr 1fr 1fr 1fr 1fr;
}

.simple-inventory-listing:nth-child(2n) {
    background-color: #000;
}

.simple-inventory-listing > a,
.simple-inventory-listing > span {
    display: inline-block;
}

.all-listing.simple-inventory-listing {
    border-top: 1px solid #fafafa;
    background-color: transparent;
}

.drop-link {
    color: #e33;
}

.drop-link:active,
.drop-link:focus,
.drop-link:hover {
    color: #f88;
}

.simple-inventory-filter {
    text-align: right;
}

.simple-inventory-filter input {
    display: inline-block;
}

/* End Simple Inventory */



#sidebar-header {
    display: block;
}

#mini-map {
    display: block;
    width: 250px;
    height: 150px;
}

/* notify.min.css, by chapel; for use with notify.js; v1.0.0 */
#notify{position:fixed;display:block;width:16em;right:-20em;top:2em;padding:.5em;background-color:#fff;color:#000;-webkit-transition:right .3s;-moz-transition:right .3s;-o-transition:right .3s;transition:right .3s}#notify.open{right:0}
/* end notify.min.css */



#outerCircleText {
    color: #fff;
    position: absolute;
    top: 0;
    left: 0;
    z-index: 3000;
    cursor: default;
}

#outerCircleText div {
    position: relative;
}

#outerCircleText div div {
    position: absolute;
    top: 0;
    left: 0;
    text-align: center;
}


.macro-mess-up-words {
    font-size: 20px;
    color: red;
}

.macro-spoiler {
    font-size: 20px;
    color: red;
}

/* SILENT */
.silent-link {
    text-decoration: none;
    color: inherit;
}

/*  HALL OF RECORDS */
.hall-of-records {
    display: grid;
    grid-template-columns: repeat(auto-fit, minmax(120px, 1fr));
    gap: 15px;
    padding: 20px;
    text-align: center;
}

.stat-item {
    background-color: #f3f3f3;  /* Light background for stats */
    border: 1px solid #ddd;
    border-radius: 8px;
    padding: 10px;
}

.stat-item img {
    width: 40px;
    height: 40px;
    margin-bottom: 8px;
}

.stat-item p {
    font-size: 14px;
    color: #333;
    margin: 0;
}

.tabs-tabset {
	--cols: 1;
	--button-rounding: 10px;
	--tab-color: #343434;
	--tab-selected: #565656;
}

.tabs-tabs {
	display: grid;
	grid-template-columns: repeat(var(--cols),1fr);
	border-bottom: 1px solid #fff;
}

.tabs-tabs button {
	border-top-left-radius: var(--button-rounding);
	border-top-right-radius: var(--button-rounding);
	background: var(--tab-color);
	border: none;
	margin: 0 5px
}

.tabs-tabs button.selected {
	background: var(--tab-selected)
}

.tabs-contents {
	padding: 1em
}

.tabs-content.hidden {
	display: none
}

/* WRAPPED */

.tabs-tabset.wrapped .tabs-tabs {
  display: flex;
  flex-direction: row;
  flex-wrap: wrap;
}

.tabs-tabset.wrapped .tabs-tabs button {
  transition-duration: 0ms;
}

.tabs-tabset.wrapped .tabs-tabs button.selected {
  order: calc(var(--cols) + 1);
  width: 100%;
  margin-top: -5px;
}

/* STACKED */

.tabs-tabset.stacked .tabs-tabs {
	display: grid;
	grid-template-columns: 1fr;
	border-bottom: 1px solid #fff;
}

.tabs-tabset.stacked .tabs-tabs button {
	border-bottom: 1px solid #fff;
    border-radius: 0;
}

.tabs-tabset.stacked .tabs-tabs button:first-child {
	border-top-left-radius: var(--button-rounding);
	border-top-right-radius: var(--button-rounding);
}

.tabs-tabset.stacked .tabs-tabs button:last-child {
	border-bottom: none;
}

/* LEFT & RIGHT */

.tabs-tabset.left {
	display: grid;
	grid-template-columns: 2.5em 1fr;
    grid-template-areas: "tabs content";
}

.tabs-tabset.right {
	display: grid;
	grid-template-columns: 1fr 2.5em;
    grid-template-areas: "content tabs";
}

.tabs-tabset.left .tabs-tabs, .tabs-tabset.right .tabs-tabs {
    border-bottom: none;
    grid-area: tabs;
    grid-template-columns: 1fr;
}

.tabs-tabset.left .tabs-tabs button span, .tabs-tabset.right .tabs-tabs button span {
    writing-mode: vertical-rl;
	text-orientation: upright;
}

.tabs-tabset.left .tabs-tabs {
	border-right: 1px solid #fff;
}

.tabs-tabset.right .tabs-tabs {
	border-left: 1px solid #fff;
}

.tabs-tabset.left .tabs-tabs button {
	border-radius: initial;
	border-top-left-radius: var(--button-rounding);
	border-bottom-left-radius: var(--button-rounding);
    margin: 5px 0px;
}

.tabs-tabset.right .tabs-tabs button {
	border-radius: initial;
	border-top-right-radius: var(--button-rounding);
	border-bottom-right-radius: var(--button-rounding);
    margin: 5px 0px;
}